<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CES.AlphaScan.Base</name>
    </assembly>
    <members>
        <member name="T:CES.CircularArray.CircularArray`1">
            <summary>
            Implementation of a circular array.
            Samuel Everson, WKU-CES, July 17 2019
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CES.CircularArray.CircularArray`1.Head">
            <summary>
            Index of the first element in the array.
            </summary>
        </member>
        <member name="P:CES.CircularArray.CircularArray`1.Tail">
            <summary>
            Index of the last element in the array.
            </summary>
        </member>
        <member name="P:CES.CircularArray.CircularArray`1.Capacity">
            <summary>
            Number of elements the <see cref="T:CES.CircularArray.CircularArray`1"/> can hold without needing to be resized.
            </summary>
        </member>
        <member name="P:CES.CircularArray.CircularArray`1.Count">
            <summary>
            Number of elements currently inside the circular array.
            </summary>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.#ctor(System.Int32)">
            <summary>
            Creates a circular array with capacity <paramref name="size"/>.
            </summary>
            <param name="size">Starting capacity of the array.</param>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.Enqueue(`0)">
            <summary>
            Adds <paramref name="item"/> to end of the circular array.
            </summary>
            <param name="item">Item to add to the array.</param>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.Enqueue(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds <paramref name="itemList"/> to end of the circular array.
            </summary>
            <param name="itemList">List of items to add to the array.</param>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.Dequeue">
            <summary>
            Removes the first item in the circular array.
            </summary>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.DequeueTo(System.Int32)">
            <summary>
            Removes all items up to and including the item located at <paramref name="endIndex"/>.
            </summary>
            <param name="endIndex">Index to dequeue until.</param>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.ResizeArray">
            <summary>
            Doubles the capacity of the circular array.
            </summary>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.ResizeArray(System.Int32)">
            <summary>
            Doubles the capacity of the circular array until larger than <paramref name="_newSize"/>.
            Exceptions:
            <see cref="T:System.ArgumentOutOfRangeException"/> thrown if <paramref name="_newSize"/> is less than Capacity.
            </summary>
        </member>
        <member name="P:CES.CircularArray.CircularArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the array item at index <paramref name="i"/>.
            </summary>
            <param name="i">Index of the item to access.</param>
            <returns></returns>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.ToArray">
            <summary>
            Outputs the circular array as an array of <typeparamref name="T"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.ToArray(System.Int32)">
            <summary>
            Outputs the circular array from element <paramref name="beginIndex"/> to the end as an array of <typeparamref name="T"/>.
            </summary>
            <param name="beginIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.ToArray(System.Int32,System.Int32)">
            <summary>
            Outputs the circular array from element <paramref name="beginIndex"/> to <paramref name="endIndex"/> as an array of <typeparamref name="T"/>.
            </summary>
            <param name="beginIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.Clear">
            <summary>
            Clears the circular array.
            </summary>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.Clear(System.Int32)">
            <summary>
            Clears the circular array and resizes to size <paramref name="newCapacity"/>.
            </summary>
            <param name="newCapacity"></param>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.GetEnumerator">
            <summary>
            Returns an enumerator for this circular array.
            </summary>
            <returns>Enumerator for this array.</returns>
        </member>
        <member name="T:CES.CircularArray.CircularArray`1.Enumerator`1">
            <summary>
            Object to handle a single iteration over a circular array.
            </summary>
            <typeparam name="Y">Type stored in circular array.</typeparam>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.Enumerator`1.#ctor(CES.CircularArray.CircularArray{`1})">
            <summary>
            Constructs new <see cref="T:CES.CircularArray.CircularArray`1.Enumerator`1"/> for the specified <see cref="T:CES.CircularArray.CircularArray`1"/>
            </summary>
            <param name="circArray">Circular array to iterate over.</param>
        </member>
        <member name="P:CES.CircularArray.CircularArray`1.Enumerator`1.Current">
            <summary>
            Gets the element in the circular array at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.Enumerator`1.Dispose">
            <summary>
            Disposes the enumerator.
            </summary>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.Enumerator`1.MoveNext">
            <summary>
            Iterates the enumerator to the next element in the circular array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CES.CircularArray.CircularArray`1.Enumerator`1.Reset">
            <summary>
            Resets the enumerator to the first element in the circular array.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Base.IConfig">
            <summary>
            Interface for an object containing a list of configuration data as name-value pairs.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.Config.#ctor(CES.AlphaScan.Base.IConfig)">
            <summary>
            Copy constructor.
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:CES.AlphaScan.Base.IConfigProperty">
            <summary>
            Interface allowing ConfigList to contain a collection of ConfigProperty generics of different types.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Base.ConfigProperty`1">
            <summary>
            Object storing a value of type T with a string name.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CES.AlphaScan.Base.ConfigList" -->
        <member name="E:CES.AlphaScan.Base.ConfigList.CollectionChanged">
            <summary>
            Event raised when collection changes, with information about the type of change and which elements changed. Used for WPF databinding especially.
            </summary>
        </member>
        <member name="E:CES.AlphaScan.Base.ConfigList.PropertyChanged">
            <summary>
            Event raised when properties change, with the name of the property as an argument. Used for WPF databinding especially.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.ConfigList.NotifyPropertyChanged(System.String)">
            <summary>
            Raises PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:CES.AlphaScan.Base.ConfigList.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises CollectionChanged event with information about the type of change and which elements changed. Used for WPF databinding especially.
            </summary>
            <param name="e">Event argument containing information about the change.</param>
        </member>
        <member name="M:CES.AlphaScan.Base.ConfigList.Add(CES.AlphaScan.Base.IConfigProperty)">
            <summary>
            Add a ConfigProperty by value alone. Uses IConfigProperty.Name as key.
            </summary>
            <param name="value">ConfigProperty to add to list.</param>
        </member>
        <member name="M:CES.AlphaScan.Base.ConfigList.Add(System.String,CES.AlphaScan.Base.IConfigProperty)">
            <summary>
            Add a ConfigProperty to list with given key. Good practice would be for key to be the same as value.Name.
            </summary>
            <param name="key">Name of property added to list.</param>
            <param name="value">ConfigProperty to add to list.</param>
        </member>
        <member name="M:CES.AlphaScan.Base.ConfigList.Remove(System.String)">
            <summary>
            Removes a ConfigProperty from the list.
            </summary>
            <param name="key">Key of ConfigProperty to remove.</param>
            <returns>Was removal successful.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ConfigList.Clear">
            <summary>
            Clears ConfigList.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.ConfigList.Item(System.String)">
            <summary>
            Index operator for ConfigList.
            </summary>
            <param name="key">Key of ConfigProperty to index.</param>
            <returns>ConfigProperty matching given key.</returns>
        </member>
        <member name="T:CES.AlphaScan.Base.ICsvWritable">
            <summary>
            Interface for objects that can be written as a line in a CSV file.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.ICsvWritable.CsvHeader">
            <summary>
            CSV format header for CSV file of this data type.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.ICsvWritable.ToCsvString">
            <summary>
            Converts this object into a line of CSV data. Should match 
            format in the <see cref="P:CES.AlphaScan.Base.ICsvWritable.CsvHeader"/> string.
            </summary>
            <returns>Line of CSV data to represent this object.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ICsvWritable.FromCsvString(System.String)">
            <summary>
            Converts a csv line string into an instance of the class.
            </summary>
            <param name="csvLine">Line of CSV data to convert to an object.</param>
            <returns>Data as an instance of this class.</returns>
        </member>
        <member name="T:CES.AlphaScan.Base.IOutputManager">
            <summary>
            Interface for object handling all output data saving and output directory creation.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.IOutputManager.OutputDirectory">
            <summary>
            The root directory for all file saving.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.IOutputManager.RunDirectory">
            <summary>
            Directory of the current run.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.IOutputManager.InfoFileName">
            <summary>
            String used as name (and file type) for info file.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.IOutputManager.ChangeOutputDirectory(System.String)">
            <summary>
            Changes the directory that this <see cref="T:CES.AlphaScan.Base.IOutputManager"/> saves data to.
            </summary>
            <param name="outDirectory"></param>
        </member>
        <member name="M:CES.AlphaScan.Base.IOutputManager.NextRun">
            <summary>
            Creates and sets up a new run folder. Sets the run number as the 
            lowest one not already used. If a valid run is currently selected, 
            attempts to use the next valid run number.
            </summary>
            <returns>Selected run number.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.IOutputManager.NextRun(System.Int32)">
            <summary>
            Creates and sets up a new run folder. Sets the run number as the 
            lowest one not already used starting from <paramref name="runNum"/>.
            </summary>
            <param name="runNum">Minimum run number to select.</param>
            <returns>Selected run number.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.IOutputManager.TrySaveData(System.String,System.Collections.Generic.IEnumerable{CES.AlphaScan.Base.ICsvWritable})">
            <summary>
            Writes collection of data objects to a csv file. Handles selection and creation of csv files. 
            Uses preexisting file if it exists, creates new file if it doesn't. "Thread-safe".
            </summary>
            <param name="fileName">Name of the file to save the data to. Creates it if it does not exist. 
            (Includes file extension. Ex: "dataFile.csv", not "dataFile")</param>
            <param name="dataList"></param>
            <returns>Whether data was successfully saved or not.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fileName"/> is invalid.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if save operation is cancelled.</exception>
        </member>
        <member name="M:CES.AlphaScan.Base.IOutputManager.TrySaveData(System.String,System.Object,System.Func{System.String,System.Object,System.Boolean,System.Boolean})">
            <summary>
            Writes data to an alternate file type. Handles selection and creation of files. 
            Uses preexisting file if it exists, creates new file if it doesn't. "Thread-safe".
            </summary>
            <param name="fileName">Name of the file to save the data to. Creates it if it does not exist. 
            (Includes file extension. Ex: "dataFile.bin", not "dataFile") File name cannot be the same as 
            the <see cref="P:CES.AlphaScan.Base.IOutputManager.InfoFileName"/>.</param>
            <param name="data">Object representing the data to save.</param>
            <param name="saveFunction">Function delegate that saves data in alternative format. Takes object 
            representing data, string representing path of file to save to, and bool of if it is the first 
            time writing to the file. Returns whether successfully saved the data.</param>
            <returns>Whether data was successfully saved or not.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fileName"/> is invalid.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown if save operation is cancelled.</exception>
        </member>
        <member name="M:CES.AlphaScan.Base.IOutputManager.SaveInfoFile(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the info data to be saved to the info file in the next run.
            </summary>
            <param name="newInfo">List of names and values of info data.</param>
            <returns>Whether successful in saving info file. False if file already saved or file failed to save.</returns>
        </member>
        <member name="T:CES.AlphaScan.Base.ISensorManager">
            <summary>
            Interface for a sensor manager. Manages all sensor connection 
            and control and initial data processing.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.ISensorManager.Name">
            <summary>
            Name of the sensor
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.ISensorManager.IsConnected">
            <summary>
            Whether or not the sensor is currently connected.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.ISensorManager.IsRunning">
            <summary>
            Whether or not the sensor is currently running.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.ISensorManager.IsProcessing">
            <summary>
            Whether the sensor manager is currently processing data.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorManager.Start">
            <summary>
            Starts the sensor.
            </summary>
            <returns>Whether successful.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorManager.Abort">
            <summary>
            Stops reading and processing data. Not guaranteed to process all collected data.
            </summary>
            <returns>Awaitable task of whether aborted successfully.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorManager.StopAndProcess">
            <summary>
            Stops reading, but continues to process collected data.
            </summary>
            <returns>Awaitable task of whether stopped and finished processing successfully.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorManager.SetSettings(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},CES.AlphaScan.Base.IOutputManager)">
            <summary>
            Sets settings for the sensor manager.
            </summary>
            <param name="sensorSettings">Sensor-specific settings.</param>
            <param name="globalSettings">Globally used settings.</param>
            <param name="outputManager">Output manager to use to save data.</param>
            <returns></returns>
        </member>
        <member name="T:CES.AlphaScan.Base.LatLng">
            <summary>
            Pairing of a latitude and longitude.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.LatLng.#ctor(System.Double,System.Double)">
            <summary>
            Constructs new <see cref="T:CES.AlphaScan.Base.LatLng"/> struct using the specified 
            latitude and longitude values.
            </summary>
            <param name="lat">Latitude value to be stored.</param>
            <param name="lng">Longitude value to be stored.</param>
        </member>
        <member name="P:CES.AlphaScan.Base.LatLng.Lat">
            <summary>
            Latitude value.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.LatLng.Lng">
            <summary>
            Longitude value.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Base.LogMessageEventArgs">
            <summary>
            Event arguments used for logging messages.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.LogMessageEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates new event arguments using specified message and the current time in UTC.
            </summary>
            <param name="message">Message to be logged.</param>
            <param name="sender">Name of the sender of the message.</param>
        </member>
        <member name="M:CES.AlphaScan.Base.LogMessageEventArgs.#ctor(System.String,System.DateTime,System.String)">
            <summary>
            Creates new event arguments using specified message and time.
            </summary>
            <param name="message">Message to be logged.</param>
            <param name="sentTime">Time message was sent.</param>
            <param name="sender">Name of the sender of the message.</param>
        </member>
        <member name="M:CES.AlphaScan.Base.LogMessageEventArgs.#ctor(CES.AlphaScan.Base.LogMessageEventArgs,System.String)">
            <summary>
            Creates new event arguments from existing event arguments. Prepends new sender.
            </summary>
            <param name="logMessage">Log message to copy.</param>
            <param name="sender">Name of the sender of the message.</param>
        </member>
        <member name="P:CES.AlphaScan.Base.LogMessageEventArgs.Message">
            <summary>
            Message to be logged.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.LogMessageEventArgs.SentTime">
            <summary>
            Time the message was sent.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.LogMessageEventArgs.Sender">
            <summary>
            Name of the sender.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Base.ILogMessage">
            <summary>
            Interface for objects that can log a message.
            </summary>
        </member>
        <member name="E:CES.AlphaScan.Base.ILogMessage.MessageLogged">
            <summary>
            Event that contains message data and notifies that the 
            message should be logged.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Base.SafeCounter">
            <summary>
            Thread safe counter. Allows knowledge of whether a value is zero.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.SafeCounter.#ctor">
            <summary>
            Constructs a new <see cref="T:CES.AlphaScan.Base.SafeCounter"/> instance with count set to 0.
            </summary>
        </member>
        <member name="F:CES.AlphaScan.Base.SafeCounter.count">
            <summary>
            Counter count. The number that the counter is based on.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.SafeCounter.CountNotZero">
            <summary>
            Returns whether the counter is not zero.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.SafeCounter.Increment">
            <summary>
            Increments the counter safely.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.SafeCounter.Decrement">
            <summary>
            Decrements the counter safely.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.SafeCounter.WaitForZero(System.Int32)">
            <summary>
            Waits until the 
            </summary>
            <returns></returns>
        </member>
        <member name="T:CES.AlphaScan.Base.VehicleSide">
            <summary>
            The side of the vehicle the antenna is on.
            </summary>
        </member>
        <member name="F:CES.AlphaScan.Base.VehicleSide.Left">
            <summary>
            Left side of the vehicle.
            </summary>
        </member>
        <member name="F:CES.AlphaScan.Base.VehicleSide.Right">
            <summary>
            Right side of the vehicle.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Acquisition.ObjectLocation">
            <summary>
            Combined mmWave object with GPS location.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.ObjectLocation.Lat">
            <summary>
            X position of the detected object.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.ObjectLocation.Lng">
            <summary>
            Y position of the detected object.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.ObjectLocation.Time">
            <summary>
            Time the raw data was acquired.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.ObjectLocation.VehicleSide">
            <summary>
            The side of the vehicle that the object was detected on.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.ObjectLocation.ClusterStrength">
            <summary>
            Strength of the detected cluster. Arises from clustering algorithm.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.ObjectLocation.ClusterSize">
            <summary>
            Size of the detected cluster. Arises from clustering algorithm.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.ObjectLocation.#ctor(System.Double,System.Double,System.DateTime,CES.AlphaScan.Base.VehicleSide,System.Double,System.Int32)">
            <summary>
            Constructs new <see cref="T:CES.AlphaScan.Acquisition.ObjectLocation"/> instance with the specified values.
            </summary>
            <param name="lat">X position of the detected object.</param>
            <param name="lng">Y position of the detected object.</param>
            <param name="time">Time the object was detected.</param>
            <param name="vehicleSide">The side of the vehicle that the object was detected on.</param>
            <param name="clusterStrength">Strength of the detected cluster.</param>
            <param name="clusterSize">Size of the detected cluster.</param>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.ObjectLocation.CsvHeader">
            <summary>
            Header line for a CSV file of this data type.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.ObjectLocation.ToCsvString">
            <summary>
            Converts the <see cref="T:CES.AlphaScan.Acquisition.ObjectLocation"/> into a line of CSV data as specified by <see cref="P:CES.AlphaScan.Acquisition.ObjectLocation.CsvHeader"/>.
            </summary>
            <returns>String line of CSV data as specified by <see cref="P:CES.AlphaScan.Acquisition.ObjectLocation.CsvHeader"/>.</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.ObjectLocation.FromCsvString(System.String)">
            <summary>
            Converts a line of CSV data in the format specified in <see cref="P:CES.AlphaScan.Acquisition.ObjectLocation.CsvHeader"/> into a <see cref="T:CES.AlphaScan.Acquisition.ObjectLocation"/> instance.
            </summary>
            <param name="csvLine">Line of CSV data as a string in format specified by <see cref="P:CES.AlphaScan.Acquisition.ObjectLocation.CsvHeader"/>.</param>
            <returns><see cref="T:CES.AlphaScan.Acquisition.ObjectLocation"/> instance as an <see cref="T:CES.AlphaScan.Base.ICsvWritable"/></returns>
            <exception cref="T:System.ArgumentException">Line did not contain enough variables to parse.</exception>
            <exception cref="T:System.InvalidCastException">String failed to parse into correct data type.</exception>
        </member>
        <member name="T:CES.AlphaScan.Acquisition.TagObjectLocation">
            <summary>
            Combined mmWave object with GPS location.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.TagObjectLocation.Lat">
            <summary>
            X position of the detected object.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.TagObjectLocation.Lng">
            <summary>
            Y position of the detected object.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.TagObjectLocation.Time">
            <summary>
            Time the raw data was acquired.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.TagObjectLocation.VehicleSide">
            <summary>
            The side of the vehicle that the object was detected on.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.TagObjectLocation.ClusterStrength">
            <summary>
            Strength of the detected cluster. Arises from clustering algorithm.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.TagObjectLocation.ClusterSize">
            <summary>
            Size of the detected cluster. Arises from clustering algorithm.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.TagObjectLocation.TagId">
            <summary>
            ID of the RFID tag read.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.TagObjectLocation.#ctor(System.Double,System.Double,System.DateTime,CES.AlphaScan.Base.VehicleSide,System.Double,System.Int32,System.String)">
            <summary>
            Constructs new <see cref="T:CES.AlphaScan.Acquisition.TagObjectLocation"/> instance with the specified values.
            </summary>
            <param name="lat">X position of the detected object.</param>
            <param name="lng">Y position of the detected object.</param>
            <param name="time">Time the object was detected.</param>
            <param name="vehicleSide">The side of the vehicle that the object was detected on.</param>
            <param name="clusterStrength">Strength of the detected cluster.</param>
            <param name="clusterSize">Size of the detected cluster.</param>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.TagObjectLocation.CsvHeader">
            <summary>
            Header line for a CSV file of this data type.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.TagObjectLocation.ToCsvString">
            <summary>
            Converts the <see cref="T:CES.AlphaScan.Acquisition.TagObjectLocation"/> into a line of CSV data as specified by <see cref="P:CES.AlphaScan.Acquisition.TagObjectLocation.CsvHeader"/>.
            </summary>
            <returns>String line of CSV data as specified by <see cref="P:CES.AlphaScan.Acquisition.TagObjectLocation.CsvHeader"/>.</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.TagObjectLocation.FromCsvString(System.String)">
            <summary>
            Converts a line of CSV data in the format specified in <see cref="P:CES.AlphaScan.Acquisition.TagObjectLocation.CsvHeader"/> into a <see cref="T:CES.AlphaScan.Acquisition.TagObjectLocation"/> instance.
            </summary>
            <param name="csvLine">Line of CSV data as a string in format specified by <see cref="P:CES.AlphaScan.Acquisition.TagObjectLocation.CsvHeader"/>.</param>
            <returns><see cref="T:CES.AlphaScan.Acquisition.TagObjectLocation"/> instance as an <see cref="T:CES.AlphaScan.Base.ICsvWritable"/></returns>
            <exception cref="T:System.ArgumentException">Line did not contain enough variables to parse.</exception>
            <exception cref="T:System.InvalidCastException">String failed to parse into correct data type.</exception>
        </member>
        <member name="T:CES.AlphaScan.Acquisition.IAcquisitionManager">
            <summary>
            Manager for controlling all sensors.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.IAcquisitionManager.Name">
            <summary>
            Name for the manager.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.GetSensorsRunning">
            <summary>
            Gets whether each sensor manager is processing or the sensor is reading.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.GetProcessorsRunning">
            <summary>
            Gets whether each combination manager loop is processing.
            </summary>
            <returns>A boolean for each loop. Each represent whether the loop is running.</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.WaitForProcessorRunning(System.Int32)">
            <summary>
            Gets tasks that complete when the combination manager threads finish.
            </summary>
            <param name="timeout">Timeout for any wait methods that require it. In milliseconds.</param>
            <returns>One awaitable task for each combination manager loop possible. Each completes
            with result true when the loop has stopped running. If the loop was not running, 
            returns a completed task with result true. Result is false if there is a timeout.</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.StartAllSensors">
            <summary>
            Starts all sensors using their respective settings.
            </summary>
            <returns>Awaitable task that completes when the function is finished.</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.StopAllSensors">
            <summary>
            Stops all sensors that are running and waits for them to finish processing data.
            </summary>
            <returns>Awaitable task that completes when the function is finished.</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.AbortAllSensors">
            <summary>
            Stops all sensors that are running. Does not guarantee that all read data will be processed.
            </summary>
            <returns>Awaitable task that completes when the function is finished.</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.ConfigureAllSensors">
            <summary>
            Configures each sensor using their respective settings. Letter in front of settings indicates what settings applies to each sensor.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.SetmmWaveSettings">
            <summary>
            Sets mmWave sensor settings. Letter in front of settings indicates what settings applies to each sensor.
            </summary>
            <returns>bool of whether the mmWave settings were set.</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.StartmmWave">
            <summary>
            Starts the mmWave sensor.
            </summary>
            <returns>bool of whether the mmWave sensor started</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.StopmmWave">
            <summary>
            Stops the mmWave sensor.
            </summary>
            <returns>bool of whether the mmWave sensor stopped</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.AbortmmWave">
            <summary>
            Stops the sensor and aborts data processing. Not guaranteed to 
            finish processing collected data.
            </summary>
            <returns>bool of whether the sensor stopped</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.SetGPSSettings">
            <summary>
            Sets GPS sensor settings.
            </summary>
            <returns>bool of whether the GPS settings were set.</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.StartGPS">
            <summary>
            Connects the GPS sensor, begins collecting data.
            </summary>
            <returns>bool of whether GPS sensor connected</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.StopGPS">
            <summary>
            Disconnects the GPS sensor, stops collecting data.
            </summary>
            <returns>bool of whether the GPS sensor disconnected</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.AbortGPS">
            <summary>
            Stops the sensor and aborts data processing. Not guaranteed to 
            finish processing collected data.
            </summary>
            <returns>bool of whether the sensor stopped</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.SetRFIDSettings">
            <summary>
            Sets the settings for the RFID manager.
            </summary>
            <returns>bool of whether the RFID settings were set</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.StartRFID">
            <summary>
            Starts the RFID manager and begins collecting data.
            </summary>
            <returns>bool of whether the RFID sensor started</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.StopRFID">
            <summary>
            stops the RFID manager and stops collecting data
            </summary>
            <returns>bool of whether the RFID manager stopped</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.IAcquisitionManager.AbortRFID">
            <summary>
            Stops the sensor and aborts data processing. Not guaranteed to 
            finish processing collected data.
            </summary>
            <returns>bool of whether the sensor stopped</returns>
        </member>
        <member name="E:CES.AlphaScan.Acquisition.IAcquisitionManager.BlacklistTagDetected">
            <summary>
            Event to report tags detected on the blacklist.
            </summary>
        </member>
        <member name="E:CES.AlphaScan.Acquisition.IAcquisitionManager.UpdateGPSMap">
            <summary>
            Event telling the GUI to draw new GPS points to the map.
            </summary>
        </member>
        <member name="E:CES.AlphaScan.Acquisition.IAcquisitionManager.UpdateTagLocationMap">
            <summary>
            Event telling the GUI to draw new TagLocation objects to the map.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.IAcquisitionManager.GpsMapData">
            <summary>
            Queue of <see cref="T:CES.AlphaScan.Gps.GpsData"/> points to add to the map.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Acquisition.ICombinationManager">
            <summary>
            Interface for the class controlling the combination of sensor data.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.ICombinationManager.Name">
            <summary>
            Name of the manager.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.ICombinationManager.IsmmWaveGPSThreadProcessing">
            <summary>
            bool of whether the locationObject thread is processing.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Acquisition.ICombinationManager.IsClusterObjRFIDThreadProcessing">
            <summary>
            bool of whether the TagLocationObjects thread is processing.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.ICombinationManager.CreateClusterObjRFIDThread">
            <summary>
            creates thread for combining LocationObjects and RFID data
            </summary>
            <returns>bool of whether thread was created</returns>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.ICombinationManager.StopAndProcess">
            <summary>
            Stops the processing loops but waits for each loop to finish processing data.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Acquisition.ICombinationManager.Stop">
            <summary>
            Stops the processing loops. Does not wait for each loop to finish processing data.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Gps.GpsBearingData">
            <summary>
            Calculated bearing and geolocation data with a time stamp.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Gps.GpsBearingData.#ctor(System.Double,System.Double,System.DateTime,System.Double)">
            <summary>
            Constructs new <see cref="T:CES.AlphaScan.Gps.GpsBearingData"/> object with the specified data.
            </summary>
            <param name="lat">Latitude in degrees.</param>
            <param name="lng">Longitude in degrees.</param>
            <param name="time">Time the data was read.</param>
            <param name="bearing">Caclulated bearing.</param>
        </member>
        <member name="P:CES.AlphaScan.Gps.GpsBearingData.Time">
            <summary>
            Time the geolocation was read. UTC.
            </summary>
        </member>
        <member name="F:CES.AlphaScan.Gps.GpsBearingData.Lat">
            <summary>
            Latitude in degrees.
            </summary>
        </member>
        <member name="F:CES.AlphaScan.Gps.GpsBearingData.Lng">
            <summary>
            Longitude in degrees.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Gps.GpsBearingData.Bearing">
            <summary>
            The bearing in degrees (clockwise of North?).
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Gps.GpsData">
            <summary>
            Storage type and structure of GPS data that is received
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Gps.GpsData.#ctor(System.DateTime,System.Double,System.Double,System.Boolean,System.String,System.String)">
            <summary>
            Creates <see cref="T:CES.AlphaScan.Gps.GpsData"/> object with the parameters below
            </summary>
            <param name="time"></param>
            lat long may need to be doubles
            <param name="lat"></param>
            <param name="lng"></param>
            <param name="RTKEnabled"></param>
            <param name="fixType"></param>
            <param name="fixFlagType"></param>
        </member>
        <member name="P:CES.AlphaScan.Gps.GpsData.Time">
            <summary>
            Time received from the reader
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Gps.GpsData.Lat">
            <summary>
            Processed latitude data from the reader
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Gps.GpsData.Long">
            <summary>
            Processed longitude data from the reader
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Gps.GpsData.RTKEnable">
            <summary>
            Checked fix type to see if RTK is enabled
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Gps.GpsData.FixType">
            <summary>
            Fix type of packet
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Gps.GpsData.FixFlagType">
            <summary>
            Fix flag type of packet
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Gps.GpsData.CsvHeader">
            <summary>
            Header line for a CSV file of this data type.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Gps.GpsData.ToCsvString">
            <summary>
            Converts the <see cref="T:CES.AlphaScan.Gps.GpsData"/> into a line of CSV data as specified by <see cref="P:CES.AlphaScan.Gps.GpsData.CsvHeader"/>.
            </summary>
            <returns>String line of CSV data as specified by <see cref="P:CES.AlphaScan.Gps.GpsData.CsvHeader"/>.</returns>
        </member>
        <member name="M:CES.AlphaScan.Gps.GpsData.FromCsvString(System.String)">
            <summary>
            Converts a line of CSV data in the format specified in <see cref="P:CES.AlphaScan.Gps.GpsData.CsvHeader"/> into a <see cref="T:CES.AlphaScan.Gps.GpsData"/> instance.
            </summary>
            <param name="csvLine">Line of CSV data as a string in format specified by <see cref="P:CES.AlphaScan.Gps.GpsData.CsvHeader"/>.</param>
            <returns><see cref="T:CES.AlphaScan.Gps.GpsData"/> instance as an <see cref="T:CES.AlphaScan.Base.ICsvWritable"/></returns>
            <exception cref="T:System.ArgumentException">Line did not contain enough variables to parse.</exception>
            <exception cref="T:System.InvalidCastException">String failed to parse into correct data type.</exception>
        </member>
        <member name="T:CES.AlphaScan.Gps.IGpsManager">
            <summary>
            Interface for a GPS manager. Manages all sensor connection 
            and control and initial data processing.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Gps.IGpsManager.GPSDataOut">
            <summary>
            Reader for the output data channel.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Gps.IGpsManager.SetUp">
            <summary>
            Sets up manager.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Gps.IGpsSensorModule">
            <summary>
            Interface for GPS sensor driver module.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Gps.IGpsSensorModule.Name">
            <summary>
            Name of the GPS sensor.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Gps.IGpsSensorModule.IsConnected">
            <summary>
            Whether or not the sensor is currently connected.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Gps.IGpsSensorModule.IsProcessing">
            <summary>
            Whether GPS data is currently being processed.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Gps.IGpsSensorModule.Start">
            <summary>
            Connects the GPS sensor and starts reading data.
            </summary>
            <returns>bool value of whether the connection was completed</returns>
        </member>
        <member name="M:CES.AlphaScan.Gps.IGpsSensorModule.Abort">
            <summary>
            Disconnects the sensor and stops reading data. Not guaranteed to read all 
            collected data from sensor.
            </summary>
            <returns>Awaitable task of whether aborted successfully.</returns>
        </member>
        <member name="M:CES.AlphaScan.Gps.IGpsSensorModule.StopAndProcess">
            <summary>
            Disconnects sensor, but continues to read collected data until done.
            </summary>
            <returns>Awaitable task of whether stopped and finished processing successfully.</returns>
        </member>
        <member name="M:CES.AlphaScan.Gps.IGpsSensorModule.SendMessage(System.Int32)">
            <summary>
            Sends a string message to the sensor if possible.
            </summary>
            <param name="message">Message to be sent to the sensor.</param>
        </member>
        <member name="M:CES.AlphaScan.Gps.IGpsSensorModule.WriteStartUp">
            <summary>
            Writes startup messages to the sensor.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Gps.IGpsSensorModule.SetSensorSettings(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},CES.AlphaScan.Base.IOutputManager)">
            <summary>
            Sets settings read from config files to GPS.
            </summary>
            <param name="GPSSettings">IDictionary of GPS specific settings</param>
            <param name="globalSettings">IDictionary of global settings</param>
            <param name="outputManager">Output manager to save to</param>
        </member>
        <member name="T:CES.AlphaScan.mmWave.ClusteredObject">
            <summary>
            Data about an object detected through clustering heatmap data.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.ClusteredObject.X">
            <summary>
            X position of the detected object.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.ClusteredObject.Y">
            <summary>
            Y position of the detected object.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.ClusteredObject.Time">
            <summary>
            Time the raw data was acquired.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.ClusteredObject.VehicleSide">
            <summary>
            The side of the vehicle that the object was detected on.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.ClusteredObject.ClusterStrength">
            <summary>
            Strength of the detected cluster. Arises from clustering algorithm.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.ClusteredObject.ClusterSize">
            <summary>
            Size of the detected cluster. Arises from clustering algorithm.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.mmWave.ClusteredObject.#ctor(System.Double,System.Double,System.DateTime,CES.AlphaScan.Base.VehicleSide,System.Double,System.Int32)">
            <summary>
            Constructs new <see cref="T:CES.AlphaScan.mmWave.ClusteredObject"/> instance with the specified values.
            </summary>
            <param name="x">X position of the detected object.</param>
            <param name="y">Y position of the detected object.</param>
            <param name="time">Time the object was detected.</param>
            <param name="vehicleSide">The side of the vehicle that the object was detected on.</param>
            <param name="clusterStrength">Strength of the detected cluster.</param>
            <param name="clusterSize">Size of the detected cluster.</param>
        </member>
        <member name="P:CES.AlphaScan.mmWave.ClusteredObject.CsvHeader">
            <summary>
            Header line for a CSV file of this data type.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.mmWave.ClusteredObject.ToCsvString">
            <summary>
            Converts the <see cref="T:CES.AlphaScan.mmWave.ClusteredObject"/> into a line of CSV data as specified by <see cref="P:CES.AlphaScan.mmWave.ClusteredObject.CsvHeader"/>.
            </summary>
            <returns>String line of CSV data as specified by <see cref="P:CES.AlphaScan.mmWave.ClusteredObject.CsvHeader"/>.</returns>
        </member>
        <member name="M:CES.AlphaScan.mmWave.ClusteredObject.FromCsvString(System.String)">
            <summary>
            Converts a line of CSV data in the format specified in <see cref="P:CES.AlphaScan.mmWave.ClusteredObject.CsvHeader"/> into a <see cref="T:CES.AlphaScan.mmWave.ClusteredObject"/> instance.
            </summary>
            <param name="csvLine">Line of CSV data as a string in format specified by <see cref="P:CES.AlphaScan.mmWave.ClusteredObject.CsvHeader"/>.</param>
            <returns><see cref="T:CES.AlphaScan.mmWave.ClusteredObject"/> instance as an <see cref="T:CES.AlphaScan.Base.ICsvWritable"/></returns>
            <exception cref="T:System.ArgumentException">Line did not contain enough variables to parse.</exception>
            <exception cref="T:System.InvalidCastException">String failed to parse into correct data type.</exception>
        </member>
        <member name="T:CES.AlphaScan.mmWave.ImmWaveManager">
            <summary>
            Interface for a mmWave manager. Manages all sensor connection 
            and control and initial data processing.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.ImmWaveManager.ClusterOut">
            <summary>
            Reader for the output data channel.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.mmWave.ImmWaveManager.SetUp">
            <summary>
            Sets up manager.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.mmWave.ImmWaveManager.AddToChannel(System.Collections.Generic.IList{CES.AlphaScan.mmWave.ClusteredObject})">
            <summary>
            Writes data to the output channel.
            </summary>
            <param name="input">Data to write to the channel.</param>
        </member>
        <member name="T:CES.AlphaScan.mmWave.InterpolationData">
            <summary>
            Data used for interpolating mmWave heatmap data.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.mmWave.InterpolationData.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs new <see cref="T:CES.AlphaScan.mmWave.InterpolationData"/> object with the specified data.
            </summary>
            <param name="x">X position of the mmWave reading.</param>
            <param name="y">Y position of the mmWave reading.</param>
            <param name="strength">Strength of the mmWave reading.</param>
        </member>
        <member name="P:CES.AlphaScan.mmWave.InterpolationData.X">
            <summary>
            X position of the mmWave reading.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.InterpolationData.Y">
            <summary>
            Y position of the mmWave reading.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.InterpolationData.Strength">
            <summary>
            Strength of the mmWave reading.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.mmWave.ImmWaveSensorModule">
            <summary>
            Interface for mmWave sensor driver module.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.ImmWaveSensorModule.Name">
            <summary>
            Name of the mmWave sensor
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.ImmWaveSensorModule.UARTPort">
            <summary>
            UART port of the mmWave sensor
            </summary>
        </member>
        <member name="P:CES.AlphaScan.mmWave.ImmWaveSensorModule.DATAPort">
            <summary>
            DATA port of the mmWave sensor
            </summary>
        </member>
        <member name="M:CES.AlphaScan.mmWave.ImmWaveSensorModule.Connect">
            <summary>
            Opens the connection to sensor.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.mmWave.ImmWaveSensorModule.Disconnect">
            <summary>
            Closes the connection to sensor.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.mmWave.ImmWaveSensorModule.Start">
            <summary>
            Begins sensor reading session.
            </summary>
            <returns>True if successfully began reading.</returns>
        </member>
        <member name="M:CES.AlphaScan.mmWave.ImmWaveSensorModule.Stop">
            <summary>
            Ends sensor reading session.
            </summary>
            <returns>True if successfully ended sensor reading session.</returns>
        </member>
        <member name="M:CES.AlphaScan.mmWave.ImmWaveSensorModule.SendMessage(System.String)">
            <summary>
            Sends a string message to the sensor if possible.
            </summary>
            <param name="message">Message to be sent to the sensor.</param>
            <returns>Whether message was successfully sent.</returns>
        </member>
        <member name="M:CES.AlphaScan.mmWave.ImmWaveSensorModule.SetSensorSettings(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},CES.AlphaScan.Base.IOutputManager)">
            <summary>
            Uses read settings from config to set mmWave settings
            </summary>
            <param name="mmWaveSettings">IDictionary of mmWave specific settings</param>
            <param name="globalSettings">IDictionary of global settings</param>
            <param name="outputManager">Output Manager to save to</param>
        </member>
        <member name="T:CES.AlphaScan.mmWave.DetectedObject">
            <summary>
            Struct containing data pertaining to a detected object;
            </summary>
        </member>
        <member name="M:CES.AlphaScan.mmWave.DetectedObject.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Int64,System.Int32)">
            <summary>
            Constructs new <see cref="T:CES.AlphaScan.mmWave.DetectedObject"/> instance with the specified values.
            </summary>
            <param name="range"></param>
            <param name="doppler"></param>
            <param name="peakValue"></param>
            <param name="x">X position of the detected object.</param>
            <param name="y">Y position of the detected object.</param>
            <param name="z">Z position of the detected object.</param>
            <param name="time">Time the object was detected.</param>
            <param name="tag">Tag for identifying object.</param>
        </member>
        <member name="M:CES.AlphaScan.mmWave.DetectedObject.Print">
            <summary>
            Outputs values as comma-delimited string.
            </summary>
            <returns>String in the form "Range,Doppler,PeakValue,X,Y,Z,Time,Tag".</returns>
        </member>
        <member name="P:CES.AlphaScan.mmWave.DetectedObject.CsvHeader">
            <summary>
            Header line for a CSV file of this data type.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.mmWave.DetectedObject.ToCsvString">
            <summary>
            Converts the <see cref="T:CES.AlphaScan.mmWave.DetectedObject"/> into a line of CSV data as specified by <see cref="P:CES.AlphaScan.mmWave.DetectedObject.CsvHeader"/>.
            </summary>
            <returns>String line of CSV data as specified by <see cref="P:CES.AlphaScan.mmWave.DetectedObject.CsvHeader"/>.</returns>
        </member>
        <member name="M:CES.AlphaScan.mmWave.DetectedObject.FromCsvString(System.String)">
            <summary>
            Converts a line of CSV data in the format specified in <see cref="P:CES.AlphaScan.mmWave.DetectedObject.CsvHeader"/> into a <see cref="T:CES.AlphaScan.mmWave.DetectedObject"/> instance.
            </summary>
            <param name="csvLine">Line of CSV data as a string in format specified by <see cref="P:CES.AlphaScan.mmWave.DetectedObject.CsvHeader"/>.</param>
            <returns><see cref="T:CES.AlphaScan.mmWave.DetectedObject"/> instance as an <see cref="T:CES.AlphaScan.Base.ICsvWritable"/></returns>
            <exception cref="T:System.ArgumentException">Line did not contain enough variables to parse.</exception>
            <exception cref="T:System.InvalidCastException">String failed to parse into correct data type.</exception>
        </member>
        <member name="T:CES.AlphaScan.mmWave.PacketData">
            <summary>
            storage type and structure of mmWave data that is received
            </summary>
        </member>
        <member name="M:CES.AlphaScan.mmWave.PacketData.#ctor(System.Byte[],System.DateTime)">
            <summary>
            storage for mmWave data, may change if needing to post process before saving
            </summary>
            <param name="fullPacket"></param>
            <param name="time"></param>
        </member>
        <member name="F:CES.AlphaScan.mmWave.PacketData.FullPacket">
            <summary>
            a full packet of data, may want to use byte[]
            </summary>
        </member>
        <member name="F:CES.AlphaScan.mmWave.PacketData.Time">
            <summary>
            time that the packet was found by the processor, possibly change to datetime object
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Rfid.RfidTime">
            <summary>
            Class containing methods for converting between time output by Alien RFID reader and C# 
            <see cref="T:System.DateTime"/> objects. RFID reader outputs time as the number of milliseconds 
            since 1/1/1970 00:00:00 UTC.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.RfidTime.MinTime">
            <summary>
            Minimum time in RFID reader time format. Equivalent to 1/1/1970 00:00:00 UTC.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Rfid.RfidTime.RfidTimeToDateTime(System.Int64)">
            <summary>
            Converts a value in RFID time to a DateTime object.
            </summary>
            <param name="rfidTime">RFID time value.</param>
            <returns>Time value converted to a DateTime object.</returns>
            <exception cref="T:System.ArgumentException">Thrown if time value is too large to convert.</exception>
        </member>
        <member name="M:CES.AlphaScan.Rfid.RfidTime.DateTimeToRfidTime(System.DateTime)">
            <summary>
            Converts a DateTime object to an RFID time value.
            </summary>
            <param name="dateTime">Time value to convert.</param>
            <returns>Time value converted to an RFID time value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if time value is too small to convert.</exception>
        </member>
        <member name="T:CES.AlphaScan.Rfid.IRfidSensorModule">
            <summary>
            Interface for Sensor Module. Class that controls and reads output from a sensor. May also perform some data processing.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.IRfidSensorModule.Name">
            <summary>
            Type of sensor.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.IRfidSensorModule.Tag">
            <summary>
            Tag to identify this sensor.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Rfid.IRfidSensorModule.Connect">
            <summary>
            Opens or reopens the connection to the sensor.
            </summary>
            <returns>Bool whether connection was successful.</returns>
        </member>
        <member name="M:CES.AlphaScan.Rfid.IRfidSensorModule.Disconnect">
            <summary>
            Closes the connection to sensor.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Rfid.IRfidSensorModule.Start">
            <summary>
            Begins sensor reading session.
            </summary>
            <returns>True if successfully began reading.</returns>
        </member>
        <member name="M:CES.AlphaScan.Rfid.IRfidSensorModule.Stop">
            <summary>
            Ends sensor reading session.
            </summary>
            <returns>True if successfully ended sensor reading session.</returns>
        </member>
        <member name="M:CES.AlphaScan.Rfid.IRfidSensorModule.SendMessage(System.String)">
            <summary>
            Sends a string message to the sensor if possible.
            </summary>
            <param name="message">Message to be sent to the sensor.</param>
        </member>
        <member name="M:CES.AlphaScan.Rfid.IRfidSensorModule.Reboot">
            <summary>
            Asynchronously reboots the reader.
            </summary>
            <returns>Task that completes when the reader is finished being rebooted.</returns>
        </member>
        <member name="M:CES.AlphaScan.Rfid.IRfidSensorModule.FullResetSettings">
            <summary>
            Resets the reader's settings to a hardcoded list.
            </summary>
            <returns>Whether settings were successfully reset.</returns>
        </member>
        <member name="T:CES.AlphaScan.Rfid.TagData">
            <summary>
            Contains data about a single reading of an RFID Tag.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Rfid.TagData.#ctor(System.String,System.Double,System.Int64,System.Int32)">
            <summary>
            Constructs new TagData object with the properties given in the parameters.
            </summary>
            <param name="tagId">EPC ID of the tag being read.</param>
            <param name="rssi">RSSI strength with which the tag was read.</param>
            <param name="lastSeenMSec">Most recent time the tag was read in milliseconds since 1/1/1970 00:00:00 UTC.</param>
            <param name="rxAntenna">ID of the antenna that read the tag.</param>
        </member>
        <member name="M:CES.AlphaScan.Rfid.TagData.#ctor(System.String,System.Double,System.DateTime,System.Int32)">
            <summary>
            Constructs new TagData object with the properties given in the parameters.
            </summary>
            <param name="tagId">EPC ID of the tag being read.</param>
            <param name="rssi">RSSI strength with which the tag was read.</param>
            <param name="time">Most recent time the tag was read.</param>
            <param name="rxAntenna">ID of the antenna that read the tag.</param>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagData.TagId">
            <summary>
            ID of the tag read by the reader.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagData.Rssi">
            <summary>
            RSSI strength with which the tag was read.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagData.LastSeenTime">
            <summary>
            The time the tag was read most recently.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagData.RxAntenna">
            <summary>
            Number describing which antenna read the tag.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagData.CsvHeader">
            <summary>
            Header line for a CSV file of this data type.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Rfid.TagData.ToCsvString">
            <summary>
            Converts the <see cref="T:CES.AlphaScan.Rfid.TagData"/> into a line of CSV data as specified by <see cref="P:CES.AlphaScan.Rfid.TagData.CsvHeader"/>.
            </summary>
            <returns>String line of CSV data as specified by <see cref="P:CES.AlphaScan.Rfid.TagData.CsvHeader"/>.</returns>
        </member>
        <member name="M:CES.AlphaScan.Rfid.TagData.FromCsvString(System.String)">
            <summary>
            Converts a line of CSV data in the format specified in <see cref="P:CES.AlphaScan.Rfid.TagData.CsvHeader"/> into a <see cref="T:CES.AlphaScan.Rfid.TagData"/> instance.
            </summary>
            <param name="csvLine">Line of CSV data as a string in format specified by <see cref="P:CES.AlphaScan.Rfid.TagData.CsvHeader"/>.</param>
            <returns><see cref="T:CES.AlphaScan.Rfid.TagData"/> instance as an <see cref="T:CES.AlphaScan.Base.ICsvWritable"/></returns>
            <exception cref="T:System.ArgumentException">Line did not contain enough variables to parse.</exception>
            <exception cref="T:System.InvalidCastException">String failed to parse into correct data type.</exception>
        </member>
        <member name="T:CES.AlphaScan.Rfid.TagPeak">
            <summary>
            Object containing all information regarding peak RFID tag values. Contains ID of tag read and data about the peak readings by two antennas.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagPeak.CsvHeader">
            <summary>
            Header line for a CSV file of this data type.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Rfid.TagPeak.ToCsvString">
            <summary>
            Converts the <see cref="T:CES.AlphaScan.Rfid.TagPeak"/> into a line of CSV data as specified by <see cref="P:CES.AlphaScan.Rfid.TagPeak.CsvHeader"/>.
            </summary>
            <returns>String line of CSV data as specified by <see cref="P:CES.AlphaScan.Rfid.TagPeak.CsvHeader"/>.</returns>
        </member>
        <member name="M:CES.AlphaScan.Rfid.TagPeak.FromCsvString(System.String)">
            <summary>
            Converts a line of CSV data in the format specified in <see cref="P:CES.AlphaScan.Rfid.TagPeak.CsvHeader"/> into a <see cref="T:CES.AlphaScan.Rfid.TagPeak"/> instance.
            </summary>
            <param name="csvLine">Line of CSV data as a string in format specified by <see cref="P:CES.AlphaScan.Rfid.TagPeak.CsvHeader"/>.</param>
            <returns><see cref="T:CES.AlphaScan.Rfid.TagPeak"/> instance as an <see cref="T:CES.AlphaScan.Base.ICsvWritable"/></returns>
            <exception cref="T:System.ArgumentException">Line did not contain enough variables to parse.</exception>
            <exception cref="T:System.InvalidCastException">String failed to parse into correct data type.</exception>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagPeak.TagId">
            <summary>
            ID of the tag being read.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Rfid.TagPeak.AntennaPeak">
            <summary>
            Contains peak RSSI values for RFID tags being read by a single antenna.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagPeak.AntennaPeak.AntennaId">
            <summary>
            ID of the antenna reading the data.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagPeak.AntennaPeak.Time">
            <summary>
            Time of the peak RFID reading. In milliseconds since 1/1/1970. 
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagPeak.AntennaPeak.Strength">
            <summary>
            Strength of the peak RFID reading. Amplitude, not logarithmic RSSI.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Rfid.TagPeak.AntennaPeak.#ctor(System.Int32,System.Int64,System.Double)">
            <summary>
            Constructs new <see cref="T:CES.AlphaScan.Rfid.TagPeak.AntennaPeak"/> object using a given ID and peak.
            </summary>
            <param name="antId">ID of the antenna.</param>
            <param name="time">Time of the peak RFID reading.</param>
            <param name="strength">Strength of the peak RFID reading.</param>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagPeak.FirstPeak">
            <summary>
            Peak of the reading of the first antenna to read the tag. 
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagPeak.LastPeak">
            <summary>
            Peak of the reading of the last antenna to read the tag. 
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Rfid.TagPeak.Side">
            <summary>
            Side of the vehicle the tag was read on.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Rfid.TagPeak.#ctor(System.String,CES.AlphaScan.Base.VehicleSide,System.Tuple{System.Int64,System.Double},System.Int32,System.Tuple{System.Int64,System.Double},System.Int32)">
            <summary>
            Creates new <see cref="T:CES.AlphaScan.Rfid.TagPeak"/> object with the given data.
            </summary>
            <param name="tagId">ID of the tag being read.</param>
            <param name="vehicleSide">Side of the vehicle the tag was read on.</param>
            <param name="firstPeak">Peak of the first antenna to read the tag.</param>
            <param name="firstId">ID of the first antenna to read the tag.</param>
            <param name="lastPeak">Peak of the last antenna to read the tag.</param>
            <param name="lastId">ID of the last antenna to read the tag.</param>
        </member>
        <member name="M:CES.AlphaScan.Rfid.TagPeak.#ctor(System.String,CES.AlphaScan.Base.VehicleSide,System.Int64,System.Double,System.Int32,System.Int64,System.Double,System.Int32)">
            <summary>
            Creates new <see cref="T:CES.AlphaScan.Rfid.TagPeak"/> object with the given data.
            </summary>
            <param name="tagId">ID of the tag being read.</param>
            <param name="vehicleSide">Side of the vehicle the tag was read on.</param>
            <param name="firstTime">Time of the peak of the first antenna to read the tag.</param>
            <param name="firstStrength">Strength of the peak of the first antenna to read the tag.</param>
            <param name="firstId">ID of the first antenna to read the tag.</param>
            <param name="lastTime">Time of the peak of the last antenna to read the tag.</param>
            <param name="lastStrength">Strength of the peak of the last antenna to read the tag.</param>
            <param name="lastId">ID of the last antenna to read the tag.</param>
        </member>
    </members>
</doc>
