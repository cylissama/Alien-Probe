<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CES.AlphaScan.Base</name>
    </assembly>
    <members>
        <member name="T:Circular_Array.CircularArray`1">
            <summary>
            Implementation of a circular array.
            Samuel Everson, WKU-CES, July 17 2019
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Circular_Array.CircularArray`1.Count">
            <summary>
            Number of elements currently inside the circular array.
            </summary>
        </member>
        <member name="M:Circular_Array.CircularArray`1.#ctor(System.Int32)">
            <summary>
            Creates a circular array with capacity <paramref name="size"/>.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Circular_Array.CircularArray`1.Enqueue(`0)">
            <summary>
            Adds <paramref name="item"/> to end of the circular array.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Circular_Array.CircularArray`1.Enqueue(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds <paramref name="itemList"/> to end of the circular array.
            </summary>
            <param name="itemList"></param>
        </member>
        <member name="M:Circular_Array.CircularArray`1.Dequeue">
            <summary>
            Removes the first item in the circular array.
            </summary>
        </member>
        <member name="M:Circular_Array.CircularArray`1.DequeueTo(System.Int32)">
            <summary>
            Removes all items up to and including the item located at <paramref name="endIndex"/>.
            </summary>
            <param name="endIndex"></param>
        </member>
        <member name="M:Circular_Array.CircularArray`1.ResizeArray">
            <summary>
            Doubles the capacity of the circular array.
            </summary>
        </member>
        <member name="M:Circular_Array.CircularArray`1.ResizeArray(System.Int32)">
            <summary>
            Doubles the capacity of the circular array until larger than <paramref name="_newSize"/>.
            Exceptions:
            <see cref="T:System.ArgumentOutOfRangeException"/> thrown if <paramref name="_newSize"/> is less than Capacity.
            </summary>
        </member>
        <member name="P:Circular_Array.CircularArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the array item at index <paramref name="i"/>.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Circular_Array.CircularArray`1.ToArray">
            <summary>
            Outputs the circular array as an array of <typeparamref name="T"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Circular_Array.CircularArray`1.ToArray(System.Int32)">
            <summary>
            Outputs the circular array from element <paramref name="beginIndex"/> to the end as an array of <typeparamref name="T"/>.
            </summary>
            <param name="beginIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Circular_Array.CircularArray`1.ToArray(System.Int32,System.Int32)">
            <summary>
            Outputs the circular array from element <paramref name="beginIndex"/> to <paramref name="endIndex"/> as an array of <typeparamref name="T"/>.
            </summary>
            <param name="beginIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Circular_Array.CircularArray`1.Clear">
            <summary>
            Clears the circular array.
            </summary>
        </member>
        <member name="M:Circular_Array.CircularArray`1.Clear(System.Int32)">
            <summary>
            Clears the circular array and resizes to size <paramref name="newCapacity"/>.
            </summary>
            <param name="newCapacity"></param>
        </member>
        <member name="M:CES.AlphaScan.Base.Config.#ctor(CES.AlphaScan.Base.IConfig)">
            <summary>
            Copy constructor.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:CES.AlphaScan.Base.IProcessor.GetData">
            <summary>
            Returns processed data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CES.AlphaScan.Base.IProcessor.GetRawData">
            <summary>
            Returns raw data from internal buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="E:CES.AlphaScan.Base.IProcessor.DataProcessedEvent">
            <summary>
            Event raised when new data has been processed and is ready to send.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorController.SendConfig(System.Collections.Generic.IEnumerable{CES.AlphaScan.Base.IConfig})">
            <summary>
            Update each config with same ID as the config in <see cref="!:configList"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:CES.AlphaScan.Base.DataReceivedEventArgs">
            <summary>
            Event argument for facilitating notification of decoupled objects where one listens as another receives data. 
            Object receiving data will send an event with this argument to allow other object to copy the data.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.DataReceivedEventArgs.#ctor(System.Object,System.Object)">
            <summary>
            Constructs a DataReceivedEventArg object with a reference to copy of the data buffer being observed.
            </summary>
            <param name="bufferCopy">Reference to the data buffer copy as an object.</param>
        </member>
        <member name="P:CES.AlphaScan.Base.DataReceivedEventArgs.DataBufferCopy">
            <summary>
            A copy of the data buffer for event subscribers to copy data from.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Base.SensorStatus">
            <summary>
            Struct containing data that describes the current status.
            </summary>
        </member>
        <member name="F:CES.AlphaScan.Base.SensorStatus.Tag">
            <summary>
            Tag for which sensor this status originates from.
            </summary>
        </member>
        <member name="F:CES.AlphaScan.Base.SensorStatus.Connected">
            <summary>
            Signifies whether the sensor is currently connected.
            </summary>
        </member>
        <member name="F:CES.AlphaScan.Base.SensorStatus.Running">
            <summary>
            Signifies whether the sensor is currently in a reading session.
            </summary>
        </member>
        <member name="F:CES.AlphaScan.Base.SensorStatus.Errors">
            <summary>
            List of any errors the sensor may have encountered.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Base.ISensorModule">
            <summary>
            Interface for Sensor Module. Class that controls and reads output from a sensor. May also perform some data processing.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.ISensorModule.Name">
            <summary>
            Type of sensor.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.ISensorModule.Tag">
            <summary>
            Tag to identify this sensor.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorModule.Connect">
            <summary>
            Opens or reopens the connection to the sensor.
            </summary>
            <returns>Bool whether connection was successful.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorModule.Disconnect">
            <summary>
            Closes the connection to sensor.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorModule.Start">
            <summary>
            Begins sensor reading session.
            </summary>
            <returns>True if successfully began reading.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorModule.Stop">
            <summary>
            Ends sensor reading session.
            </summary>
            <returns>True if successfully ended sensor reading session.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorModule.SendMessage(System.String)">
            <summary>
            Sends a string message to the sensor if possible.
            </summary>
            <param name="message">Message to be sent to the sensor.</param>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorModule.GetStatus">
            <summary>
            Returns SensorStatus struct describing the current state of the sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorModule.GetData">
            <summary>
            Retrieves processed data from sensor as an array of objects.
            </summary>
            <returns>Object array of processed data.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorModule.UpdateConfig(CES.AlphaScan.Base.IConfig)">
            <summary>
            Configures sensor module with desired configuration.
            </summary>
            <returns>Boolean whether configuration was successful.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorModule.UpdateDefaultConfig(CES.AlphaScan.Base.IConfig)">
            <summary>
            Configures the default configuration for the sensor module.
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:CES.AlphaScan.Base.ISensorModule.GetConfig">
            <summary>
            Returns copy of config object describing this sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="E:CES.AlphaScan.Base.ISensorModule.DataReceived">
            <summary>
            Event raised when data is ready to send to subscribers.
            $$ May send data in event arguments.
            $$ Implementation should provide some method for clearing internal data buffer after sending if necessary.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Base.DetectedObject">
            <summary>
            Struct containing data pertaining to a detected object;
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.DetectedObject.Print">
            <summary>
            Outputs values as comma-delimited string.
            </summary>
            <returns>String in the form "Range,Doppler,PeakValue,X,Y,Z,Time,Tag".</returns>
        </member>
        <member name="T:CES.AlphaScan.Base.TagData">
            <summary>
            Contains data about a single reading of an RFID Tag.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.TagData.#ctor(System.String,System.Double,System.Int64,System.Int64,System.Int32)">
            <summary>
            Constructs new TagData object with the properties given in the parameters.
            </summary>
            <param name="tagId"></param>
            <param name="rssi"></param>
            <param name="discoveryMSec"></param>
            <param name="lastSeenMSec"></param>
            <param name="rxAntenna"></param>
        </member>
        <member name="P:CES.AlphaScan.Base.TagData.TagId">
            <summary>
            Id of the tag read by the reader.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.TagData.Rssi">
            <summary>
            RSSI strength with which the tag was read.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.TagData.DiscoveryMSec">
            <summary>
            The time the tag was first read. Determined by reader. In ms.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.TagData.LastSeenMSec">
            <summary>
            The time the tag was read most recently. In ms.
            </summary>
        </member>
        <member name="P:CES.AlphaScan.Base.TagData.RxAntenna">
            <summary>
            Number describing which antenna read the tag.
            </summary>
        </member>
        <member name="T:CES.AlphaScan.Base.SensorModule">
            <summary>
            Test implementation of events in ISensorModule
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.SensorModule.Disconnect">
            <summary>
            Closes the connection to sensor.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.SensorModule.Start">
            <summary>
            Begins sensor reading session.
            </summary>
            <returns>True if successfully began reading.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.SensorModule.Stop">
            <summary>
            Ends sensor reading session.
            </summary>
            <returns>True if successfully ended sensor reading session.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.SensorModule.SendMessage(System.String)">
            <summary>
            Sends a string message to the sensor if possible.
            </summary>
            <param name="message">Message to be sent to the sensor.</param>
        </member>
        <member name="M:CES.AlphaScan.Base.SensorModule.GetData">
            <summary>
            Retrieves processed data from sensor as an array of objects.
            </summary>
            <returns>Object array of processed data.</returns>
        </member>
        <member name="M:CES.AlphaScan.Base.SensorModule.UpdateConfig(CES.AlphaScan.Base.IConfig)">
            <summary>
            Configures sensor module with determined configuration.
            </summary>
            <returns>Boolean whether configuration was successful.</returns>
        </member>
        <member name="E:CES.AlphaScan.Base.SensorModule.DataReceived">
            <summary>
            Event raised when data is ready to send to subscribers.
            $$ May send data in event arguments.
            $$ Implementation should provide some method for clearing internal data buffer after sending if necessary.
            </summary>
        </member>
        <member name="M:CES.AlphaScan.Base.SensorModule.ClearBuffer(System.Object,CES.AlphaScan.Base.DataReceivedEventArgs)">
            <summary>
            Clears internal buffer of data.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CES.AlphaScan.Base.SensorModule.OnDataReceived(CES.AlphaScan.Base.DataReceivedEventArgs)">
            <summary>
            Call this when data is added to internal buffer.
            </summary>
            <param name="e"></param>
        </member>
    </members>
</doc>
