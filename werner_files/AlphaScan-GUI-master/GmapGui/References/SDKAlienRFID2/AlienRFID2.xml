<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AlienRFID2</name>
    </assembly>
    <members>
        <member name="T:nsAlienRFID2.AlienDataDirector">
            <summary>
            EXPERIMENTAL.  Objects of this class may be used for sending Alien reader's messages to an external listener.
            Typical use of this class is by a mobile device, which is listening for Alien reader's notifications using CAlienServer objects and 
            wants to transfer those to a host (target) computer.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.AlienDataDirector.#ctor(System.Int32,System.Net.IPAddress,System.Boolean)">
            <summary>
            Creates instance for connecting to specified host server.
            </summary>
            <param name="targetPort">Network port value for connecting to host (target.)</param>
            <param name="targetIPAddress">IPAddress value for connecting to host (target.)</param>
            <param name="log">TRUE for turning internal API logging ON, FALSE otherwise.</param>
        </member>
        <member name="M:nsAlienRFID2.AlienDataDirector.Finalize">
            <summary>
            Disconnects and destroys current instance with freing any resources.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.AlienDataDirector.Disconnect">
            <summary>
            Closes previously opened network connection to host and frees network resources.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.AlienDataDirector.ConnectToHost">
            <summary>
            Opens network connection to host and starts transferring Alien readers' messages from all instances
            of the CAlienServer class that has been added with the AddServer() method.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.AlienDataDirector.AddServer(nsAlienRFID2.CAlienServer)">
            <summary>
            Adds new reference of an existing instance of class CAlienServer 
            to the internal collection of the AlienDataDirector.
            </summary>
            <param name="server">An existing instance of the class CAlienServer</param>
        </member>
        <member name="M:nsAlienRFID2.AlienDataDirector.RemoveServer(System.String)">
            <summary>
            Removes specified server reference from current servers' connections.
            </summary>
            <param name="notificationHost">String specifying which collection member to remove from the internal
            collection of current instance.</param>
        </member>
        <member name="M:nsAlienRFID2.AlienDataDirector.Contains(System.String)">
            <summary>
            Returns TRUE if current instance contains server specified by this connection info, FALSE otherwise.
            </summary>
            <param name="notificationHost">String as returned by the CAlienServer.NotificationHost property.</param>
            <returns>TRUE if current instance contains specified server, FALSE otherwiese.</returns>
        </member>
        <member name="E:nsAlienRFID2.AlienDataDirector.MessageForwardedOK">
            <summary>
            Event raised by an object of the AlienDataDirector class in case if an Alien reader's msg
            has been successfully transferred to a host.
            </summary>
        </member>
        <member name="E:nsAlienRFID2.AlienDataDirector.MessageForwardFAILED">
            <summary>
            Event raised by an object of the AlienDataDirector class in case if an Alien reader's msg
            has been received but could not be transferred to a host due to an error.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienDataDirector.TargetPort">
            <summary>
            Read-only property that returns value of the network port connection to host (target.)
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienDataDirector.TargetIPAddress">
            <summary>
            Read-only property that returns IPAddress of network connection to host (target.) 
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienDataDirector.IsConnectedToHost">
            <summary>
            Read-only property that returns TRUE if instance is connected to host and FALSE otherwise.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.AlienDataDirector.HostNotificationHandler">
            <summary>
            Event Handler delegate for transferring Alien reader's messages to a host machine.
            </summary>
            <param name="dataTime">Time when messages has been received and transferred to host.</param>
        </member>
        <member name="T:nsAlienRFID2.AlienUtils">
            <summary>
            Class containing static mehtods as for parcing data received 
            by an Alien reader and other utilities.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseTagList(System.String,nsAlienRFID2.TagInfo[]@)">
            <summary>
            Parses a Tag List string that is either in Text or XML format as returned by the
            "Get TagList" command into an array of type TagInfo.
            </summary>
            <param name="sData">Input string containing tag list data.
            Must be either in the Text or XML format as defined in the Alien Reader 
            Interface Guide.</param>
            <param name="aTagList">'Out' parameter - Array of type TagInfo.</param>
            <returns>Number of tags in the tag list.</returns>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseTextTagList(System.String,nsAlienRFID2.TagInfo[]@)">
            <summary>
            Parses a Tag List string (in Text format) returned by the 
            "Get TagList" command into array of variables of type TagInfo.
            </summary>
            <param name="sData">Input string containing tag list data.  
            Must be in the Text format as defined in the Alien Reader Interface Guide.
            Otherwise an exception will be generated.</param>
            <param name="aTagList">'Out' parameter - Array of type TagInfo.</param>
            <returns>Number of tags in the tag list.</returns>
            <remarks>This method throws exceptions.</remarks>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseXMLTagList(System.String,nsAlienRFID2.TagInfo[]@)">
            <summary>
            Parses an Alien Tag List string (in XML format) returned by the 
            "Get TagList" command into an array of variables of type TagInfo.
            </summary>
            <param name="sData">Input string containing tag list data in the XML format.</param>
            <param name="aTagList">'Out' parameter - Array of type TagInfo.</param>
            <returns>Number of tags in the Tag List.</returns>
            <remarks>This method throws exceptions for a bad XML format.</remarks>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseNotification(System.String,nsAlienRFID2.NotifyInfo@)">
            <summary>
            Parses an Alien reader Notification string either in the Text or 
            in the XML format into an object of type NotifyInfo containing 
            an array of type TagInfo.
            </summary>
            <param name="sNotification">Input string containing Notification data.
            Must be either in the Text or XML format as defined in the Alien Reader Interface Guide.
            Otherwise an exception will be generated.</param>
            <param name="oNotifyInfo">'Out' parameter - an object of type NotifyInfo filled with the 
            information available in the Notification message.</param>
            <returns>Number of tags in the Tag list contained within the Notification message.</returns>
            <remarks>This method throws exceptions.</remarks>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseTextNotification(System.String,nsAlienRFID2.NotifyInfo@)">
            <summary>
            Parses an Alien reader Notification string (in Text format) into 
            an object of type ReaderInfo and an array of variables of type TagInfo.
            </summary>
            <param name="sNotification">Input string containing Notification data.
            Must be in the Text format and have a NotifyHeader as defined in the Alien Reader Interface Guilde.
            Otherwise an exception will be generated.</param>
            <param name="oNotifyInfo">'Out' parameter - an object of type NotifyInfo filled with the 
            information available in the Notification message.</param>
            <returns>Number of tags in the Tag list contained within the Notification message.</returns>
            <remarks>This method throws exceptions.</remarks>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseXMLNotification(System.String,nsAlienRFID2.NotifyInfo@)">
            <summary>
            Parses an Alien reader Notification string (in the XML format) into 
            an object of type ReaderInfo and an array of variables of type TagInfo.
            </summary>
            <param name="sNotification">Input string containing Notification data.
            Must be in the XML format as defined in the Alien Reader Interface Guilde.
            Otherwise an exception will be generated.</param>
            <param name="oNotifyInfo">'Out' parameter - an object of type NotifyInfo filled with the 
            information available in the Notification message.</param>
            <returns>Number of tags in the Tag list contained within the Notification message.</returns>
            <remarks>This method throws exceptions.</remarks>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseReaderState(System.String)">
            <summary>
            Converts a string of Alien Reader settings into Hashtable.
            </summary>
            <param name="sSettings">String as returned by Alien Reader "Info" command.</param>
            <returns>Hashtable where every setting is represented by a key (a trimmed string 
            prior to the "=" sign in the Alien Reader Current Settings) and a value (a trimmed string
            in Current Settings following the "=" sign.)</returns>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseReaderState(System.String,System.Boolean)">
            <summary>
            Converts a string of Alien Reader settings into a Hashtable where key values don't 
            contain any help information of reader settings.
            </summary>
            <param name="sSettings">String as returned by Alien Reader "Info" command.</param>
            <param name="bDiscardHelpInfo">If true then this method will remove
            any help information from the left-site values of reader's settings
            prior to filling them into resulting Hashtable as key values 
            (e.g.: the setting "AutoMode (On or Off)" will result in the key "AutoMode")</param>
            <returns>Hashtable where every setting is represented by a key (a trimmed string 
            prior to the "=" sign in the Alien Reader Current Settings) and a value (a trimmed string
            in Current Settings following the "=" sign.)
            </returns>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseAlienHeartbeat(System.String,nsAlienRFID2.ReaderInfo@)">
            <summary>
            Parses a string containing Alien Heartbeat message into an object
            of type ReaderInfo.
            </summary>
            <param name="sHeartbeat">XML-string containing Alien Heartbeat message.</param>
            <param name="oRI">Out parameter filled with information about reader.</param>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseMultipleIOEvents(System.String)">
            <summary>
            Parses a string containing IO event messages 
            into an array of type AlienIOInfo.
            </summary>
            <param name="sIOevent">String containing Alien IO msg with one of more IO events
            in XML or Text format.
            </param>
            <returns>Array of type AlienIOInfo filled with information about all
            events or null in case of an error.
            </returns>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseAlienIOEvent(System.String)">
            <summary>
            Parses a string containing an IO event msg 
            into an object of type AlienIOInfo.
            <seealso cref="M:nsAlienRFID2.AlienUtils.ParseMultipleIOEvents(System.String)"/>
            </summary>
            <param name="sIOevent">One Alien IO msg in XML or Text format.
            NOTE:  This method returns a single AlienIOInfo object even if parameter contains 
            multiple IO events.  As an alternative, please use the ParseMultipleIOEvents().
            </param>
            <returns>AlienIOInfo object filled with information from
            the event msg or null in case of an error.
            </returns>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseTagData(System.String)">
            <summary>
            Parses a string of Text- or XML-formatted tag information into an object of type TagInfo.
            </summary>
            <param name="msg"></param>
            <returns>NULL if parameter is not a Text- or XML-formatted tag information.  Otherwise, a filled TagInfo object.</returns>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseTagData(System.String,System.String)">
            <summary>
            Parses a string of tag information read by the reader into an object of type TagInfo.
            </summary>
            <param name="customFormat">String of custom format using  ${...} notation or NULL for Alien Text or XML format.</param>
            <param name="msg">String of tag information read by the reader.</param>
            <returns>TagInfo object filled with tag information.</returns>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseCustomTagList(System.String,System.String)">
            <summary>
            Parses entire taglist read by the reader into a TagInfo array.
            </summary>
            <param name="customFormat">String of custom format using  ${...} notation or NULL for Alien Text or XML format.</param>
            <param name="taglist">String containing taglist information read by the reader.</param>
            <returns>An array of TagInfo objects.</returns>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.ParseCustomTag(System.String,System.String)">
            <summary>
            Parses a custom TagList formatted with a '$'-delimited custom format into an object of type TagInfo.
            </summary>
            <param name="customFormat">String of custom format in the ${...} notation.</param>
            <param name="tag">One line of tag information received either as a part of reader's Taglist response or as a TagStream message raised by API' CServer.</param>
            <returns>Null if the customFormat string doesn't contain any '$' character or "no tags"; a TagInfo object otehrwise.</returns>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.GetRegistryComs">
            <summary>
            Checks Windows Registry for available Com ports.
            </summary>
            <returns>Array of strings with Com ports names found.</returns>
        </member>
        <member name="M:nsAlienRFID2.AlienUtils.redim(System.Byte[],System.Int32)">
            <summary>
            Reallocates a byte-array to a new size.
            </summary>
            <param name="orig">Original byte-array.</param>
            <param name="newsize">New size of the byte-array to return.</param>
            <returns>Reallocated byte-array with the new size.</returns>
        </member>
        <member name="T:nsAlienRFID2.AlienLog">
            <summary>
            Troubleshooting helper static class that allows writing messages to the 'AlienAPI.log' file.
            File gets open, appended, and closed for every single writing operation.
            Default Path is the Alien domain within BizTalk RFID: 
            "C:\Program Files\Microsoft BizTalk RFID\Providers\Alien\."  
            Rollover size is 1MB with renaming an older file by adding a time stamp.  
            All AlienAPI*.log files with the LastAccessTime older than 24 hours 
            get deleted during rollovers.  
            </summary>
        </member>
        <member name="M:nsAlienRFID2.AlienLog.WriteLine(System.Boolean,System.String)">
            <summary>
            Writes specified line of text to the AlienAPI.log file.
            </summary>
            <param name="log">TRUE to enable writing.</param>
            <param name="data">String of text to log.</param>
        </member>
        <member name="P:nsAlienRFID2.AlienLog.Path">
            <summary>
            Get/Set full path (without file name) to write the AlienAPI*.log files to.
            If not set explicitely the default value will be for full API:  
            @"C:\Program Files\Microsoft BizTalk RFID\Providers\Alien\"  
            or the executing assembly CodeBase path for mobile API.
            Should be set just once prior using AlienLog writing methods.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.MyData.Parse(System.String)">
            <summary>
            Parses input string and returns an object of class MyData.
            </summary>
            <param name="sData">Must contain at least one item in the format: [name] value.  
            Multiple items must be separated by the '|' characters.</param>
            <returns>An object of class MyData as a "string, string" Dictionary or NULL if input string was null.</returns>
        </member>
        <member name="T:nsAlienRFID2.TagInfo">
            <summary>
            TagInfo class represents information about a single tag read by the reader.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.TagInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.TagInfo.#ctor(nsAlienRFID2.TagInfo)">
            <summary>
            Copy-constructor.
            </summary>
            <param name="tag">An object of type TagInfo to make copy of.</param>
        </member>
        <member name="M:nsAlienRFID2.TagInfo.Parse(System.String,System.String)">
            <summary>
            Parses an Alien tag string returned by the reader into a TagInfo object.
            </summary>
            <param name="customFormat">String of Alien TagList- or TagStreamCustomFormat in the ${...} notation.  
            If NULL, the next argument 'sTag' must be in Alien XML or Text format. </param>
            <param name="sTag">String containing tag information returned by reader.</param>
            <returns></returns>
        </member>
        <member name="M:nsAlienRFID2.TagInfo.InsertTagData(System.Int32,System.String)">
            <summary>
            Allows to insert a hexadecimal string of tag data into this instance's TagDataArray.
            </summary>
            <param name="idx">Index of tag data array where put this data.  Valid values: 0, 1, 2, 3.</param>
            <param name="value">Hexadecimal string representing tag data to add as a member of TagDataArray.</param>
            <returns></returns>
        </member>
        <member name="M:nsAlienRFID2.TagInfo.GetField(System.String)">
            <summary>
            Returns current value of specified field.  E.G.: string tagID = myTag.GetField("TagID");
            </summary>
            <param name="name">Name of field.</param>
            <returns>Current value of field.</returns>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.TagID">
            <summary>
            Read-write propery representing tag ID as Hexadecimal string.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.TagCRC">
            <summary>
            Read-write property representing Tag CRC as Hexadecimal string.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.DiscoveryTime">
            <summary>
            Read-write property representing time of tag discovery as string.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.LastSeenTime">
            <summary>
            Read-write property representing time of last tag reading as string.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.Antenna">
            <summary>
            Antenna number at which tag has been read.
            </summary>
            <remarks>This is the same as the TxAntenna.</remarks>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.ReadCount">
            <summary>
            Number of times the tag has been read.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.RxAntenna">
            <summary>
            For multi-static readers this represents the antenna number that received 
            tag signal.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.TxAntenna">
            <summary>
            For multi-static readers this represents the antenna number that transmitted
            signal to the tag.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.Protocol">
            <summary>
            For multi-protocol readers this represents the "number" of the protocol.
            </summary>
            <example> * RFIDProtocol.enumClass0 - for EPC Class 0
            * RFIDProtocol.enumClass1 - for EPC Class 1
            * RFIDProtocol.enumGen2 - for EPC Class 1 Gen.2</example>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.TagData">
            <summary>
            Obsolete.  Replaced by the TagDataArray property.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.NSI">
            <summary>
            Specifies the Numberic System Identifier for Gen2 tags.  
            Valid values for any byte in this array are 0 or 1 only.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.TagDataArray">
            <summary>
            Array of hexadecimal strings representing tag data as specified by the reader's AcqG2TagData property.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.PcWord">
            <summary>
            Tag's hexadecimal PC Word as integer value.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.Speed">
            <summary>
            Tag speed, in m/sec, signed, up to three decimal places.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.RSSI">
            <summary>
            Strength of the signal received from the tag.  Unitless, up to one decimal place.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.Direction">
            <summary>
            Direction the tag is moving.  Valid values: "+" approaching, "-" receding, "0" stationary.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.ReaderName">
            <summary>
            ReaderName of the reader who read this tag.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.HostName">
            <summary>
            HostName of the reader who read this tag.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.IPAddress">
            <summary>
            IPAddress of the reader who read this tag.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.MAC">
            <summary>
            MAC address of the reader who read this tag.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.TagInfo.Frequency">
            <summary>
            Frequency value at which this tag has been read.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.ReaderInfo">
            <summary>
            Contains key information that allows a software system to identify and contact a reader.
            This type is used in events raised and messages sent by the library.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.ReaderInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.ReaderInfo.#ctor(nsAlienRFID2.ReaderInfo)">
            <summary>
            Copy constructor.
            </summary>
            <param name="r">ReaderInfo object to make copy of.</param>
        </member>
        <member name="M:nsAlienRFID2.ReaderInfo.Equals(System.Object)">
            <summary>
            Compares current reader information to the same of parameter object.
            </summary>
            <param name="obj">Object to compare current instance to.</param>
            <returns>True if paramater is of type ReaderInfo and all its members
            (EXCEPT of the Name, Type, LatestHeartbeat, HeartbeatTime, and ReaderVersion) are equal to the same of current instance.  False otherwise.</returns>
        </member>
        <member name="M:nsAlienRFID2.ReaderInfo.GetAllFields">
            <summary>
            Returns Dictionary containing all properties of current instance with their values shown as strings.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.ReaderInfo.InterfaceType">
            <summary>
            Sets / Gets enumeration identifying current reader interface 
            as ComInterface.enumSerial or ComInterface.enumTCPIP.
            Default value is ComInterface.enumSerial.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.ReaderInfo.IPAddress">
            <summary>
            Sets / Gets string with reader's IP Address.
            During the SERIAL discovery process the clsReaderMonitor uses this field
            to show the reader's current serial com port name if the current InterfaceType is
            ComInterface.enumSerial.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.ReaderInfo.TelnetPort">
            <summary>
            Gets / Sets current network port number.
            Default value is 23.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.ReaderInfo.ComPort">
            <summary>
            Gets / Sets current Seriral Com port number.
            Default = 1.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.ReaderInfo.Name">
            <summary>
            Sets / Gets string with Reader Name.
            Default = "Alien RFID Reader"
            </summary>
        </member>
        <member name="P:nsAlienRFID2.ReaderInfo.Type">
            <summary>
            Sets / Gets string describing reader type on the library level.
            </summary>
            <example>The <c>Debug.WriteLine(readerInfo.Type);</c> statement can output 
            the following: "Alien RFID Tag Reader, Model: ALR-9780 (Four Antenna / EPC Class 1 / 915Mhz)"
            </example>
        </member>
        <member name="P:nsAlienRFID2.ReaderInfo.LatestHeartbeat">
            <summary>
            Sets / Gets time interval since the last Heartbeat (in milli-seconds.)
            </summary>
        </member>
        <member name="P:nsAlienRFID2.ReaderInfo.HeartBeatTime">
            <summary>
            Sets / Gets reader's Hearbeat period in seconds.
            For example: 30.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.ReaderInfo.MACAddress">
            <summary>
            Represents reader's MAC Address.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.ReaderInfo.BaudRate">
            <summary>
            If connected on a COM port, represents the reader's current BaudRate for serial communication.  Default = "115200".
            </summary>
        </member>
        <member name="P:nsAlienRFID2.ReaderInfo.ReaderVersion">
            <summary>
            Sets / Gets string representing current reader's version.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.clsReader">
            <summary>
            Class representing features and functionality of an Alien Reader.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.CBaseReader">
            <summary>
            Base class for Alien Readers.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.#ctor">
            <summary>
            Default constructor of the base class for an Alien reader.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.Connect">
            <summary>
            Virtual method for connecting to an Alien reader when implemented 
            in a derived class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.Disconnect">
            <summary>
            Virtual method for disconnecting from an Alien reader when implemented 
            in a derived class.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.Dispose">
            <summary>
            Virtual method for disposing object of an Alien reader when implemented 
            in a derived class.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.SendReceive(System.String,System.Boolean)">
            <summary>
            Virtual method for synchronous communication with an Alien Reader when implemented
            in a derived class.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <param name="command">String representing command to an Alien Reader.</param>
            <param name="bPrompt">True if caller expects the reader appends the command line 
            prompt (for example "Alien>") to the response to command.</param>
            <returns></returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.Reboot">
            <summary>
            Reboots the reader.
            This commands takes several seconds to complete and causes a series
            of reader responses sent back to the caller.  
            Reader terminates network connection before reboot is complete.
            In case of serial connection, Reader is rebooted after the last
            message sent: "Boot> Ready"
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <returns>In case of serial connection, string representing complete rebooting 
            sequence or a part of it prior network disconnecting otherwise. </returns>
            <NOTE> During the reboot reader closes TCP connection with the host.
            In case of network connection, caller won't be able to receive 
            complete reboot sequence.</NOTE>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.WakeTag">
            <summary>
            Sends Gen2 "Select" command to all or to a subset of tags in the field (subject to "Mask" settings)
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <returns>String "OK" on success</returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.WakeTag(System.Int32)">
            <summary>
            Sends Gen2 "Select" command to all or to a subset of tags in the field (subject to "Mask" settings)
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <param name="n">Number of selects to issue.</param>
            <returns>String "OK" on success</returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.SleepTag">
            <summary>
            Sends "Sleep" command to all or to a subset of tags in the field (subject to "Mask" command)
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <returns>String "OK".</returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.ProgramTag(System.String)">
            <summary>
            Attempts to program and verify a tag in the field with the specified ID
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <param name="sID">String containing a list of Hexadecimal bytes separated by spaces
            For example:	"80 00 FF EE 10 00 00 01"</param>
            <returns>On success string "Success!" or string with just programmed ID depending on
            setting of the ProgSuccessFormat property.</returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.VerifyTag">
            <summary>
            Obtains the complete tag memory without validating the tag ID against the checksum.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <returns>String containing:
            In case of a not locked tag - 2 bytes of checksum, at least 8 bytes of tag ID, and 2 bytes of Lock and Pass-code
            In case of a locked tag - "Programmed Tag. (Locked)"</returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.EraseTag">
            <summary>
            Sets entire EPC memory of a tag to zeros.  This command doesn't affect other Gen2 memory banks.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <returns>"Success!" on success.</returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.G2Erase(System.String,System.String,System.String)">
            <summary>
            Sets a specified portion of Gen2 tag memory to zeros.
            </summary>
            <param name="bank">Gen2 memory bank.  Valid values: 0...3.</param>
            <param name="wordPtr">Starting memory position.  Valid values: 0...2097151.</param>
            <param name="wordCnt">Number of words to erase.  Valid values: 0...32.</param>
            <returns></returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.LockTag(System.String)">
            <summary>
            Locks a tag for unauthorized memory changes.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <param name="sPass">A Hexadecimal string representing 
            byte value of the Lock- and Pass-code</param>
            <returns>"Success!" on success</returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.LockUserBlocks(System.String,System.String,System.String)">
            <summary>
            Permanently locks specified user memory of a Gen2 tag.
            </summary>
            <param name="blockPtr">Decimal block pointer.</param>
            <param name="blockMask1">Hex byte specifying first bitmask of desired "permalock" states.</param>
            <param name="blockMask2">Hex byte specifying second bitmask of desired "permalock" states.</param>
            <returns>"Success!" on success</returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.HideAlienUserBlocks(System.String)">
            <summary>
            Makes specified memory blocks readable only with an Access password.  
            Note: this "read locks" are enforced only if the tag has a non-zero password.
            </summary>
            <param name="mask">Bitmask as a hex byte string specifying wich memory blocks are readable and wich aren't.</param>
            <returns>"Success!" on success</returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.KillTag(System.String,System.String)">
            <summary>
            Renders a Gen2 tag permanently inoperative.  For a Class1-Gen1 tag - initializes the memory of a locked tag to all zeros.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <param name="sID">Full tag ID as a Hexadecimal string</param>
            <param name="sPass">Hexadecimal string representing KillCode.</param>
            <returns>"Success!" on success</returns>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.SetAcqMask(System.String,System.String,System.String)">
            <summary>
            This method is an overload for the Mask Set property.
            <seealso cref="P:nsAlienRFID2.CBaseReader.Mask"/>
            </summary>
            <param name="bitLen">String representing decimal number as mask length in bits.</param>
            <param name="bitPtr">String representing decimal number as bit pointer specifying where to apply mask.</param>
            <param name="hexBytes">Hexadecimal string representing mask bytes.</param>
            <example>
            <code> mReader.SetAcqMask("1", "0", "0");  // Clear mask allowing all tags to be addressed.</code>
            <code> mReader.SetAcqMask("16", "0", "00 03"); //Set mask matching 16 bits starting from bit0 to '00 03'</code></example>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.SetAcqC1Mask(System.String,System.String,System.String)">
            <summary>
            This method is an overload for AcqC1Mask Set property.
            <seealso cref="P:nsAlienRFID2.CBaseReader.Mask"/>
            <seealso cref="P:nsAlienRFID2.CBaseReader.AcqC1Mask"/>
            </summary>
            <param name="bitPtr">String representing decimal number as bit pointer specifying where to apply mask.</param>
            <param name="bitLen">String representing decimal number as mask length in bits.</param>
            <param name="hexBytes">Hexadecimal string representing mask bytes.</param>
            <remarks>The 'AcqC1Mask' is exclusive of the 'Mask' and 'AcqG2Mask' properties.</remarks>
            <example>
            <code> mReader.SetAcqC1Mask("1", "0", "0");  // Clear mask allowing all tags to be addressed.</code>
            <code> mReader.SetAcqC1Mask("0", "16", "00 03"); //Set mask matching 16 bits starting from bit0 to '00 03'</code></example>
        </member>
        <member name="M:nsAlienRFID2.CBaseReader.SetAcqG2Mask(System.String,System.String,System.String,System.String)">
            <summary>
            This method is an overload for the AcqG2Mask Set property.
            <seealso cref="P:nsAlienRFID2.CBaseReader.AcqG2Mask"/>
            </summary>
            <param name="memoryBank">String representing decimal number of addressed bank.</param>
            <param name="bitPtr">String representing decimal number as bit pointer specifying where to apply mask.</param>
            <param name="bitLen">String representing decimal number as mask length in bits.</param>
            <param name="hexBytes">Hexadecimal string representing mask bytes.</param>
            <example>
            <code> mReader.SetAcqG2Mask("1", "32", "8", "03");  // Set mask for any tag with EPC starting with "03" </code>
            <code> mReader.SetAcqG2Mask("2", "16", "8", "34");  // Set mask for only Alien tags (TID bank, byte#3=0x34) </code></example>
        </member>
        <member name="E:nsAlienRFID2.CBaseReader.DataReceived">
            <summary>
            Raised when an Alien Reader object receives a line of data
            from the reader.
            </summary>
            <remarks>Raised on an AsyncCallBack thread.</remarks>
        </member>
        <member name="E:nsAlienRFID2.CBaseReader.MessageReceived">
            <summary>
            Raised when an Alien Reader  object receives a complete message
            from the reader. 
            </summary>
            <remarks>Raised on an AsyncCallBack thread.</remarks>
        </member>
        <member name="E:nsAlienRFID2.CBaseReader.Connected">
            <summary>
            Raised when an Alien Reader object has successfully 
            connected to a TCP client socket or opened an existing serial port.
            </summary>
        </member>
        <member name="E:nsAlienRFID2.CBaseReader.Disconnected">
            <summary>
            Raised when an Alien Reader object has disconnected from a TCP client
            socket or closed an opened previously serial port.
            </summary>
        </member>
        <member name="E:nsAlienRFID2.CBaseReader.ReaderStateChanged">
            <summary>
            Raised when internal configuration of an Alien Reader object has been changed
            as a result of a user command "Set ..." or a Reboot, FactorySettings, AutoModeReset
            commands.  This event passes a Hashtable containing current reader's state.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.ReaderName">
            <summary>
            Gets / Sets a customized reader name as string
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.ReaderType">
            <summary>
            Gets description of the reader's model as string.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.ReaderVersion">
            <summary>
            Gets multi-line description of the reader's version.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.ReaderNumber">
            <summary>
            Gets / Sets string representation of the decimal number for the 
            reader numerical identifier.  
            Valid values: "1"..."255". 
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.Timer">
            <summary>
            Returns string representing complete sequence of timing calculation
             on the last retrieved Tag List.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.DateTime">
            <summary>
            Gets / Sets string representing current reader's local time in the format: YYYY/mm/dd hh:mm:ss.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.PersistTime">
            <summary>
            Gets / Sets string representing time interval (in seconds) during which 
            a tag's data will remain in the reader's internal tag list or active tags.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcquireMode">
            <summary>
            Gets / Sets string representation of the current acquire mode for reading tags: 
            "Inventory" (devault) or "Global Scroll"
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.TagListFormat">
            <summary>
            Gets / Sets string representing the tag list format ("Text", "XML", "Terse", or "Custom")
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqCycles">
            <summary>
            Gets / Sets string representation of the number of acquisition cycles that are performed
            each time the reader scans for tags (default = "1".)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqCount">
            <summary>
            Gets / Sets string representation of the number of reads (Global scroll or Inventory) that 
            are performed in each acquisition cycle (defaul = "3".)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqEnterWakeCount">
            <summary>
            Gets / Sets string representation of the number of Wake commands that are issued at the start
            of each acquisition cycle (default = "3".)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqExitWakeCount">
            <summary>
            Gets / Sets string representation of the number of Wake commands that are issued
            at the end of each acquisition cycle (default = "0".)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqSleepCount">
            <summary>
            Gets / Sets string representation of the number of Sleep commands that are issued 
            after the reader scans for tags in each acquisition cycle (default = "1".)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.Mask">
            <summary>
            Gets / Sets string representing the current tag ID mask that the reader uses.
            This property reflects both the reader's "Mask" and "AcqMask" commands.
            This property is different from the AckC1Mask property in the following:
            it allows masking only on tags ID field and uses the "Len-&gt;Ptr-&gt;Data" string format instead of "Ptr-&gt;Len-&gt;Data."
            <seealso cref="M:nsAlienRFID2.CBaseReader.SetAcqMask(System.String,System.String,System.String)"/>
            <seealso cref="P:nsAlienRFID2.CBaseReader.AcqC1Mask"/>
            <seealso cref="P:nsAlienRFID2.CBaseReader.AcqG2Mask"/>
            </summary>
            <remarks>This property is exclusive of the 'AcqC1Mask' and 'AcqG2Mask' properties.</remarks>
            <example>
            <code> mReader.Mask = "0";  // Clear mask allowing all tags to be addressed.</code>
            <code> mReader.Mask = "16, 0, 00 03"; //setting mask to match 16 bits starting from bit0 to '00 03'</code></example>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqC1Mask">
            <summary>
            Gets / Sets string representing current mask for the tag EPC field.
            This property is different from the Mask property in the following:
            it allows masking on the CRC field and uses the "Ptr-&gt;Len-&gt;Data" string format instead of "Len-&gt;Ptr-&gt;Data."
            <seealso cref="P:nsAlienRFID2.CBaseReader.Mask"/>
            <seealso cref="M:nsAlienRFID2.CBaseReader.SetAcqC1Mask(System.String,System.String,System.String)"/>
            </summary>
            <remarks>This property is exclusive of the 'Mask' and 'AcqG2Mask' properties.</remarks>
            <example>
            <code> mReader.AcqC1Mask = "0";  // Clear mask allowing all tags to be addressed.</code>
            <code> mReader.AcqC1Mask = "0, 16, 00 03"; //Set mask matching 16 bits starting from bit0 to '00 03'</code></example>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqG2Mask">
            <summary>
            Gets / Sets string representing current mask for any filterable field of a Gen2 tag.
            <seealso cref="M:nsAlienRFID2.CBaseReader.SetAcqC1Mask(System.String,System.String,System.String)"/>
            </summary>
            <example>
            <code> mReader.AcqG2Mask = "0";  // Clear mask allowing all tags to be addressed.</code>
            <code> mReader.AcqG2Mask = "1, 32, 8, 03";  // Set mask for any tag with EPC starting with "03"</code>
            <code> mReader.AcqG2Mask = "2, 16, 8, 34";  // Set mask for only Alien tags (TID bank, byte#3=0x34) </code></example>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqG2MaskAction">
            <summary>
            Specifies wether mask for a Gen2 tag is inclusive (only tags matching mask respond)
            or exclusive (only tags NOT matching mask respond.)  Exclusive masks do not apply to Class1 Gen1 tags.
            Valid values: "Include", "Exclude."
            Default value is "Include."
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.ProgReadAttempts">
            <summary>
            Gets / Sets integer (in decimal format) that defines how many times the reader 
            tries to read a tag in order to verify its presence prior to a programming task.  
            This property is used during the following programming tasks: Program, Erase, Kill, Lock.  
            Any successive attempt of reading tag will abort further attempts.  
            Valid values: 1...255.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.ProgEraseAttempts">
            <summary>
            Gets / Sets integer (in decimal format) that defines number of 
            erasing attempts the reader makes when requested to erase or program a tag.  
            The ProgEraseAttempts property is used during the following programming tasks:
            Program, Erase.  Any successive attempt of erasing tag will abort further attempts.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.ProgAttempts">
            <summary>
            Gets / Sets integer (in decimal format) that defines number of 
            programming attempts the reader makes  when requested to program tag.  
            Any successive attempt of programming tag will abort further attempts.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.UpTime">
            <summary>
            Read-only property that returns the elapsed time in seconds
            since the last time the reader was rebooted.  
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.TagType">
            <summary>
            Gets / Sets integer in decimal format that is a bit map of tag types 
            expected by the reader.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <example><code>mReader.TagType = 3;	//Binary "11" sets reader to expect only the Quark and Omega tags</code></example>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.RFAttenuation">
            <summary>
            Gets / Sets the RF power attenuation.  Factory default is O.
            Valid values are 0 (no attenuation, full power) to maximum attenuation - 
            no power (150 or 160 depending on the reader's type.)
            Increasing RFAttenuation by 10 reduces RF power by 1 dB.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqC1Cycles">
            <summary>
            Gets / Sets string representation of the number of acquisition cycles that are performed
            each time the reader scans for Class 1 tags (default = "1".)
            <para> If reader is not connected throws an exception.</para>
            <seea cref="P:nsAlienRFID2.CBaseReader.AcqCycles"/>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqG2Cycles">
            <summary>
            Gets / Sets string representation of the number of acquisition cycles
            to perform during each Class 1 Gen2 read action.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqC0Cycles">
            <summary>
            Gets / Sets string representation of the number of acquisition cycles
            to perform during each Class 0 read action.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqC1Count">
            <summary>
            Gets / Sets string representation of the number of reads (Global scroll or Inventory) that 
            are performed in each Class 1 acquisition cycle (defaul = "3".)
            <para> If reader is not connected throws an exception.</para>
            <seealso cref="P:nsAlienRFID2.CBaseReader.AcqCount"/>
            </summary>
            <remarks>This property throws exceptions.</remarks>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqG2Count">
            <summary>
            Gets / Sets string representation of the number of reads to perform
            in each Class 1 Gen2 read cycle.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqC0Count">
            <summary>
            Gets / Sets string representation of the number of reads to perform
            in each Class 0 read cycle.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqC1EnterWakeCount">
            <summary>
            Gets / Sets string representation of the number of Wake commands that are issued at the start
            of each acquisition cycle (default = "3".)
            <para> If reader is not connected throws an exception.</para>
            <seealso cref="P:nsAlienRFID2.CBaseReader.AcqEnterWakeCount"/>
            </summary>
            <remarks>This property throws exceptions.</remarks>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqC1ExitWakeCount">
            <summary>
            Gets / Sets string representation of the number of Wake commands that are issued
            at the end of each acquisition cycle (default = "0".)
            <para> If reader is not connected throws an exception.</para>
            <seealso cref="P:nsAlienRFID2.CBaseReader.AcqExitWakeCount"/>
            </summary>
            <remarks>This property throws exceptions.</remarks>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqC1SleepCount">
            <summary>
            Gets / Sets string representation of the number of Sleep commands that are issued 
            after the reader scans for tags in each acquisition cycle (default = "1".)
            <para> If reader is not connected throws an exception.</para>
            <seealso cref="P:nsAlienRFID2.CBaseReader.AcqSleepCount"/>
            </summary>
            <remarks>This property throws exceptions.</remarks>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqG2Q">
            <summary>
            Gets / Sets string represention of the starting Q number to use in each 
            Class 1 Gen2 read cycle.  Valid values: "0"..."7."  Default value is "3."
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqG2QMax">
            <summary>
            Gets / Sets an upper limit on Q value during Gen2 inventories.  Valid values: "0"..."15".  Default is "7".
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqG2Session">
            <summary>
            Gets / Sets string represention of the inventory session for Gen2 tags.
            Valid values: "0", "1"(default), "2", "3"
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.AcqG2Select">
            <summary>
            Gets / Sets string represention of the number of 
            SELECT commands issued by the reader at the start of each Gen2 inventory cycle.
            This property is used to tune the performance of the Gen2 air protocol.
            Valid values are between "0" and "255."
            Default value is "1."
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CBaseReader.SerialPort">
            <summary>
            Gets or sets string value representing current com port name for communicating
            with the reader using RS-232.  Valid values: "COM1:", "COM2:", ..., "COM9:"
            </summary>
        </member>
        <member name="T:nsAlienRFID2.CBaseReader.DataReceivedEventHandler">
            <summary>
            Raised when an Alien Reader object receives a line of data 
            (usually terminated by the line-terminator: "\r\n")
            from serial port or TCP client socket.
            </summary>
            <param name="data">String of data received from reader.</param>
            <remarks>Raised on an AsyncCallBack thread.</remarks>
        </member>
        <member name="T:nsAlienRFID2.CBaseReader.MessageReceivedEventHandler">
            <summary>
            Raised when an Alien Reader object receives a complete message
            terminated by the message-terminator: "\0" 
            from serial port or TCP client socket. 
            </summary>
            <param name="data">String of complete message from reader.</param>
            <remarks>Raised on an AsyncCallBack thread.</remarks>
        </member>
        <member name="T:nsAlienRFID2.CBaseReader.ConnectedEventHandler">
            <summary>
            Raised when an Alien Reader  object has successfully 
            connected to a TCP client socket or opened an existing serial port.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.CBaseReader.DisconnectedEventHandler">
            <summary>
            Raised when an Alien Reader  object disconnected from TCP client socket
            or closed an opened previously serial port.
            </summary>
            <param name="data">String describing reason for disconnecting.</param>
        </member>
        <member name="T:nsAlienRFID2.CBaseReader.ReaderStateChangedEventHandler">
            <summary>
            Raised when internal configuration of an Alien Reader object has been changed.
            </summary>
            <param name="state">Hashtable containing current settings of the reader.</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReader.#ctor(System.Boolean)">
            <summary>
            Constructor that can start logging reader's communications if in Debug configuration.
            </summary>
            <param name="log">
            If true and the assembly has been built with Debug configuration
            AlienAPI*.log files get written logging all reader's communications.
            </param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.#ctor(System.String,System.Int32)">
            <summary>
            Creates instance and initializes it for network communication.
            This method doesn't open connection yet.
            </summary>
            <param name="ipAddress">Reader's IP.</param>
            <param name="port">Reader's network port number.</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates instance and initializes it for network communication.
            This method doesn't open connection yet.
            </summary>
            <param name="ipAddress">Reader's IP.</param>
            <param name="port">Reader's network port number.</param>
            <param name="log">
            If true and the assembly has been built with Debug configuration
            AlienAPI*.log files get written logging all reader's communications.
            </param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.Dispose">
            <summary>
            Implements IDisposable.  Releases all managed and unmanaged resources.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReader.Disconnect">
            <summary>
            Destroys connection with the reader.  Upon success raises "Disconnected" event
            with string argument "Disconnected by client".
            </summary>
            <returns>
            Empty String  on success or an Exception message.
            </returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.disconnect(System.Boolean,System.Boolean)">
            <summary>
             Unsubscribes from related events, closes transport objects, resets mbConnected and mbLoggedIn flags.
            </summary>
            <returns>status</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.SendReceive(System.String,System.Boolean)">
            <summary>
            General purpose function for sending and receiving data synchronously.
            Returns after operation is completed by the reader or a timeout occures.
            </summary>
            <param name="strToSend">
            String representing an ASCII reader command with required parameters 
            (if any) as described in the "Reader/Host protocol of the Reader Interface Guide.
            </param>
            <param name="bPrompt">
            Boolean flag indicating whether to add the "Alien >" prompt at the end of expected response.
            </param>
            <returns>
            String representing reader response.
            </returns>
            <remarks>This method throws exceptions.</remarks>
            <example><code>string name = mReader.SendReceive("Get ReaderName", false);</code></example>
        </member>
        <member name="M:nsAlienRFID2.clsReader.Send(System.String,System.Boolean)">
            <summary>
            Asynchronous Send function.  Returns immediately after sending a command
            to the reader.  Use the "MessageReceived" or "DataReceived" event handlers 
            for getting reader's response.
            </summary>
            <param name="data">
            String representing an ASCII reader command with required parameters (if any) as described in the "Reader/Host protocol of the Reader Interface Guide.
            </param>
            <param name="rawsend">
            Boolean flag indicating whether to send raw data
            </param>
            <remarks>This method throws exceptions.</remarks>
            <example><code>mReader.Send("Q", false); // sends the "Quit" command to terminate
            TCP connection with reader.</code></example>
        </member>
        <member name="M:nsAlienRFID2.clsReader.OpenCOMport(System.String)">
            <summary>
            Opens specified com port without any verification of reader's presence.  
            Sets the IsConnected property.  Sets the SerialPort property to specified port name.
            Sets the ReaderSettings property InterfaceType to ComInterface.enumSerial.
            Raises the Connected event on success.
            If this com port was open before calling this method it closes this connection and reopens it again.
            Throws exceptions.
            </summary>
            <param name="com">String with the desired com port name (e.g.: "COM1".)</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.OpenCOMport(System.String,System.Int32)">
            <summary>
            Opens specified com port using specified baud rate without any verification of readers' presence.
            Sets the IsConnected property.  Sets the SerialPort property to specified port name.
            Sets the HostBaudRate property to specified value.
            Sets the ReaderSettings property InterfaceType to ComInterface.enumSerial.
            Raises the Connected event on success.
            If this com port was open before calling this method it closes this connection and reopens it again.
            Throws exceptions.
            </summary>
            <param name="com"></param>
            <param name="baudrate"></param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.Connect">
            <summary>
            Establishes Serial or Telnet connection depending on previously set InterfaceType.
            Returns synchronously when the operation completed.  Upon success raises "Connected" event.
            </summary>
            <returns>
            On success: "Connected" or "Already connected".
            Otherwise: "Can't connect", or an Exception message, or a message starting with "Error".
            </returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ConnectEasy">
            <summary>
            Establishes Serial or Telnet connection depending on previously set InterfaceType.
            In opposite to the OpenCOMport() method, the ConnectEasy() method verifies reader's presence and communication
            and doesn't close a previously existing connection.
            In opposite to the Connect() method, the ConnectEasy() method if reader wasn't connected previosly turns the reader's NotifyMode and AutoMode off.
            Returns synchronously when the operation completed.  Upon success raises "Connected" event.
            <seealso cref="M:nsAlienRFID2.clsReader.OpenCOMport(System.String)"/>
            </summary>
            <returns>
            On success: "Connected" or "Already connected".
            Otherwise: "Can't connect", or an Exception message, or a message starting with "Error".
            </returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ConnectAndLogin(System.String,System.Int32,System.String,System.Object)">
            <summary>
            Closes a previously open connection.
            Sets ComInterface property to enumTCP InterfaceType.
            Tries to open network connection with specified ipaddress and port number.
            Upon successful connection raises the Connected event and 
            tries to login with specified username and password.  
            Returns if successfully connected and logged in.
            Throws exceptions on any failure.
            </summary>
            <param name="ipaddress">String of reader's IP Address (in the IPv4 format.)</param>
            <param name="iport">Integer nuber of eithernet port to use for connection.</param>
            <param name="username">Case-sencitive string of reader's username.  Default value: "alien"</param>
            <param name="password">Case-sencitive string or SecureString of reader's password.  Default value: "password"</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.Login(System.String,System.String)">
            <summary>
            In case of TelNet InterfaceType, provides login to the reader.  Returns synchronously.
            </summary>
            <param name="username">
            Default "Alien".
            </param>
            <param name="password">
            Default "password".
            </param>
            <returns>
            True on success, false otherwise.
            </returns>
            <remarks>This method throws exceptions.</remarks>
        </member>
        <member name="M:nsAlienRFID2.clsReader.Login(System.String,System.Security.SecureString)">
            <summary>
            In case of TelNet InterfaceType, provides login to the reader.  Returns synchronously.
            NOT available in the Alien Mobile API.
            </summary>
            <param name="username">
            Default "alien"
            </param>
            <param name="password">Password as a SecureString.</param>
            <returns>
            True on success, false otherwise.
            </returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ClearCommBuffer">
            <summary>
            Clears serial or TCP communication buffer.
            </summary>
            <returns>String with current input buffer contents for TCP connection or "OK" for RS-232.</returns>
            <remarks>This method throws exceptions.</remarks>
        </member>
        <member name="M:nsAlienRFID2.clsReader.SaveSettings">
            <summary>
            Saves current reader's settings to the flash memory.
             <para> If reader is not connected throws an exception.</para>
            </summary>
            <returns>String with the reader's response.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.WriteSettings(nsAlienRFID2.IReaderInfo)">
            <summary>
            Copies settings provided as argument to the instance of this class.
            </summary>
            <param name="readerInfo">Instance of class ReaderInfo.</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.InitOnCom">
            <summary>
            Initializes Reader object for the serial connection.
            Default com port is COM1.  
            Note: This method closes a previously open connection.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReader.InitOnCom(System.Int32)">
            <summary>
            Overloaded.  Initializes reader object for serial connection 
            using specified com port.
            Note: This method closes a previously open connection.
            </summary>
            <param name="portnum">Com port number as an integer in decimal format.</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.InitOnCom(System.Int32,System.Int32)">
            <summary>
            Overloaded.  Initializes reader object for serial connection 
            using specified com port and baud rate.
            Note: This method closes a previously open connection.
            </summary>
            <param name="portnum">Com port number as an integer in decimal format.</param>
            <param name="baudrate">Baud Rate that should be used for serial communication (e.g.: 115200)</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.InitOnNetwork(System.String,System.Int32)">
            <summary>
            Initializes reader object for network connection.
            Note: This method closes a previously open connection.
            </summary>
            <param name="ipaddress">String for reader's IP Address.</param>
            <param name="iport">Network port as integer in decimal format.</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.StartListen">
            <summary>
            A TCP client feature that provides an ability to catch any reader's 
            messages sent through the network asynchronously 
            (for example message "Connection Timeout.\r\nClosing Connection...Bye!")
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReader.StopListen">
            <summary>
            Disables listening for reader's asynchronous messages sent through the TCP connection.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReader.Help">
            <summary>
            Provides list of available reader's functions and proterties.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <returns>String containing multiple lines and sections.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.FactorySettings">
            <summary>
            Resets the reader to its original factory settings, what causes reader reboot.
            </summary>
            <returns>String "All settings have been reset!" on success.</returns>
            <NOTE> During the reboot reader closes TCP connection with the host.
            In case of network connection, caller won't be able to receive 
            complete reboot sequence.</NOTE>
            <remarks>This method throws exceptions.</remarks>
        </member>
        <member name="M:nsAlienRFID2.clsReader.Ping(System.String)">
            <summary>
            Pings a network host with the specified IP Address.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <param name="saddress">String representing IP Address of the network
            computer / device to ping.</param>
            <returns>String containing complete pinging sequence.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ParseTagList(System.String,nsAlienRFID2.ITagInfo[]@)">
            <summary>
            Parses a Tag List string (in Text format) returned by the "Get TagList" command into array of variables of type TagInfo.
            <seealso cref="M:nsAlienRFID2.AlienUtils.ParseTextTagList(System.String,nsAlienRFID2.TagInfo[]@)"/>
            </summary>
            <param name="sTagList">Input string containing tag list data in Text format.</param>
            <param name="aTagList">'Out' parameter - Array of type TagInfo.</param>
            <returns>True on success, false otherwise.</returns>
            If the TagListFormat property of the clsReader object is different than "Text",
            this method will return false with the output parameter set to null.
            <remarks>This method throws exceptions.</remarks>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ParseXMLTagList(System.String,nsAlienRFID2.ITagInfo[]@,System.Boolean)">
            <summary>
            Parses a Tag List string (in XML format) returned by the "Get TagList" command into 
            array of variables of type TagInfo.
            <seealso cref="M:nsAlienRFID2.AlienUtils.ParseXMLTagList(System.String,nsAlienRFID2.TagInfo[]@)"/>
            </summary>
            <param name="data">Input string containing tag list data in the XML format.</param>
            <param name="aTagList">'Out' parameter - Array of type TagInfo.</param>
            <param name="bAppendList">Not used.  Kept for compatibility with the Alien VB6 library</param>
            <returns>True on success, false otherwise.</returns>
            <remarks>This method throws exceptions.</remarks>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ParseCustomTagList(System.String,System.String)">
            <summary>
            Parses entire taglist read by the reader into a TagInfo array.
            </summary>
            <param name="customFormat">String of custom format using  ${...} notation or NULL for Alien Text or XML format.</param>
            <param name="taglist">String containing taglist information read by the reader.</param>
            <returns>An array of TagInfo objects.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ParseCustomTag(System.String,System.String)">
            <summary>
            Parses a custom TagList formatted with a '$'-delimited custom format into an object of type TagInfo.
            </summary>
            <param name="customFormat">String of custom format in the ${...} notation.</param>
            <param name="tag">One line of tag information received either as a part of reader's Taglist response or as a TagStream message raised by API' CServer.</param>
            <returns>Null if the customFormat string doesn't contain any '$' character or "no tags"; a TagInfo object otehrwise.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ClearTagList">
            <summary>
            Clears the internal reader's and API's tag lists.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <returns>String "Tag List has been cleared!" on success.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.AutoModeTriggerNow">
            <summary>
            Emulates an external IO trigger event to effect auto mode.
            <Note>This command works only if the Reader is already in auto mode and 
            is waiting for a start trigger condition.</Note>
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <returns>String "Auto Mode Triggering Now" on success.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.AutoModeReset">
            <summary>
            Resets all auto mode parameters to their default values
            including setting the AutoMode to OFF.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReader.NotifyNow">
            <summary>
            Instructs the reader to send out an immediate notification of its tag list
            to the address currently set by the NotifyAddress command.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ProgramEPC(System.String)">
            <summary>
            Attempts to program and verify a tag in the field with the specified ID.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <param name="epcBytes">String containing a list of Hexadecimal bytes separated by spaces
            (e.g.:	"80 00 FF EE 10 00 00 01".)  In case of an empty string or a null parameter, 
            the value specified by the 'ProgEPCData' reader's property will be used instead.</param>
            <returns>On success string "Success!" or string with just programmed ID depending on
            setting of the 'ProgSuccessFormat' reader's property.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ProgramUser(System.String)">
            <summary>
            Attempts to program and verify a tag in the field with the specified user data.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <param name="userBytes">String containing a list of Hexadecimal bytes separated by spaces
            (e.g.:	"00 11 22 33 aa bb cc ee".)  In case of an empty string or a null parameter, 
            the value specified by the 'ProgUserData' reader's property will be used instead.</param>
            <returns>On success string "Success!" or string with just programmed user data depending on
            setting of the 'ProgSuccessFormat' reader's property.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ProgramAndLockEPC(System.String)">
            <summary>
            Programs specified ID bytes into the EPC bank of a Gen2 tag and locks it with a lock type predefined 
            by setting the 'ProgG2LockType' property.
            <para>Since locking without an Access Password doesn't mean anything,
            the Access Password (given by the 'ProG2AccessPwd' property) is automatically written in this operation as well.
            When the 'ProgG2LockType' is PermaLock or PermaUnlock, the Access Password is not written, since these lock types already protect
            the associated memory bank, even without an Access Password present.</para>
            <para>You should set the 'AcqG2AccessPwd' to the same value as the 'ProgG2AccessPwd' to facilitate this double operation.</para>
            </summary>
            <param name="epcBytes">Hexadecimal string representing ID bytes.  In case of an empty string or null parameter, 
            the value specified by the 'ProgEPCData' reader's property will be used instead.</param>
            <returns>String 'Success' or tag Id successfully written to tag (depending on the  ProgSuccessFormat' property.)</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ProgramAndLockUser(System.String)">
            <summary>
            Programs specified user data into the USER bank of a Gen2 tag and locks it with a lock type predefined 
            by setting the 'ProgG2LockType' property.
            <para>Since locking without an Access Password doesn't mean anything,
            the Access Password (given by the 'ProG2AccessPwd' property) is automatically written in this operation as well.
            When the 'ProgG2LockType' is PermaLock or PermaUnlock, the Access Password is not written, since these lock types already protect
            the associated memory bank, even without an Access Password present.</para>
            <para>You should set the 'AcqG2AccessPwd' to the same value as the 'ProgG2AccessPwd' to facilitate this double operation.</para>
            </summary>
            <param name="userBytes">Hexadecimal string representing user bytes.  In case of an empty string or null parameter, 
            the value specified by the 'ProgUserData' reader's property will be used instead.</param>
            <returns>String 'Success' or tag data successfully written to tag (depending on the  ProgSuccessFormat' property.)</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ProgramKillPwd(System.String)">
            <summary>
            Programs a Gen2 tag's Kill Password.
            </summary>
            <param name="killPwdBytes">String representing Kill Password (four bytes separated by spaces.)
            If argument is empty string or null, the value specified by the reader's 'ProgG2KillPwd' property is used instead.</param>
            <returns>Status string as defined by the reader's 'ProgSuccessFormat' property.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ProgramAccessPwd(System.String)">
            <summary>
            Programs a Gen2 tag's Access Password.
            </summary>
            <param name="accessPwdBytes">String representing Access Password (four bytes separated by spaces.)
            If argument is empty string or null, the value specified by the reader's 'ProgG2AccessPwd' property is used instead.</param>
            <returns>Status string as defined by the reader's 'ProgSuccessFormat' property.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.Lock(nsAlienRFID2.eLockTarget,System.String)">
            <summary>
            Locks tag's memory specified by the 'lockTarget' parameter.
            The type of locking used with Gen2 tags must be predefined by the reader's 'ProgG2LockType' property.
            <para>If a Gen2 tag has a non-zero Access Password, you must supply this password for successful operation.</para>
            </summary>
            <param name="lockTarget">Specifies lock target as "EPC", "User", "KillPwd", or "AccessPwd" enumeration value.</param>
            <param name="accessPwd">String representing four bytes of Access Password if required.</param>
            <returns>Status string as defined by the reader's 'ProgSuccessFormat' property.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.Unlock(nsAlienRFID2.eLockTarget,System.String)">
            <summary>
            Unlocks tag's memory specified by the 'lockTarget' parameter.
            The type of locking used with Gen2 tags must be predefined by the reader's 'ProgG2LockType' property.
            <para>If a Gen2 tag has a non-zero Access Password, you must supply this password for successful operation.</para>
            </summary>
            <param name="lockTarget">Specifies lock target as "EPC", "User", "KillPwd", or "AccessPwd" enumeration value.</param>
            <param name="accessPwd">String representing four bytes of Access Password if required.</param>
            <returns>Status string as defined by the reader's 'ProgSuccessFormat' property.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ClearIOList">
            <summary>
            Erases current IOList held in memory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.GetAntennaPower(System.String)">
            <summary>
            Returns integer representing current RF power for a specified antenna as percent of maximum power.
            </summary>
            <param name="antennaName">Name of antenna (e.g.: "0".)  If NULL retrieves RF power level on the first antenna.</param>
            <returns>Percent of current RF power.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.SetAntennaPower(System.String,System.Int32)">
            <summary>
            Sets current RF power to specified percent number for a specified antenna.
            </summary>
            <param name="antennaName">Name of antenna (e.g.: "0".)  If NULL sets all antennas to the same power level.</param>
            <param name="percent">RF power as percent to maximum power (must be between 0 and 100.)</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.IsAntennaConnected(System.String)">
            <summary>
            For an antenna specified by the parameter retrieves it status indicating whether antenna is physically connected to the reader or not.
            </summary>
            <param name="antenna">String representing Alien antenna name as integer value not greater than MaxAntenna.</param>
            <returns>True if antenna connected, otherwhise false.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.GetAllAntennaStatus">
            <summary>
            Retrieves status of all antennae, indicating which antenna is physically connnected to the reader.
            </summary>
            <returns>Array of TRUE/FALSE values, where index of each element represents antenna name.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.HeartbeatNow">
            <summary>
            Forces the reader to immediately issue a UDP heartbeat, regardless of the HeartbeatTime and 
            HeartbeatCount values.
            </summary>
            <returns>Returns the entire XML-formatted heartbeat packet that was broadcasted.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.G2Wake(System.Int32)">
            <summary>
            Issues single or multiple Gen2 "Select" commands to the field of tags.
            </summary>
            <param name="times">Identifies how many times will be the "Select" command issued.</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.Service(System.String,System.String)">
            <summary>
            You use the Service command to control auxiliary reader services, 
            such as the serial interface and SNMP. 
            </summary>
            <param name="serviceName">
            Name of the service you wish to control. 
            Valid values: "all", "serial", "snmp", "heartbeat", "ifmon"</param>
            <param name="command">Valid values: "status", "start", "stop", "enable", "disable"</param>
            <returns>Reader's response to the command.
             E.g.: "R A 05 serial"  means that Serial service is currently Running, Autostart enabled, startup priority 5)
             </returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.G2Read(nsAlienRFID2.eG2Bank,System.String,System.String)">
            <summary>
            Performs a low-level memory read action on a single Class1 Gen2.
            </summary>
            <param name="bank">Gen2 memory bank.</param>
            <param name="wordPtr">String representing decimal position of first word to read.</param>
            <param name="wordLen">String representing decimal number of words ot read.  If "0" entire memory bank will be read.</param>
            <returns>Hexadecimal string with read bytes.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.G2Write(nsAlienRFID2.eG2Bank,System.String,System.String)">
            <summary>
            Performs a low-level memory write action to a single Class1 Gen2 tag.
            </summary>
            <param name="bank">Gen2 memory bank: 0-Kill/Access passwords, 1-EPC, 2-Tag Identifier, 3-User data.</param>
            <param name="wordPtr">Position of first word to read.</param>
            <param name="data">Hexadecimal string representing even number of bytes to write.</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ProgramAlienImage(System.String)">
            <summary>
            Writes the entire Gen2 tag's memory map.
            </summary>
            <param name="map">Hexadecimal string (with separate bytes) representing a sequence of 24 bytes
            containing the complete tag memory image.  If NULL or empty string, the reader will use data
            predefined by the ProgramAlienImageMap and other relavant properties (e.g.: 
            PrgEPCData, ProgUserData, etc.) </param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.GetStatistics">
            <summary>
            EXPERIMENTAL (may change)!  Retrieves statistics information for current reader and its antennas accumulated since reader's bootup.
            </summary>
            <returns>List, where each list item represents tag-related statistic information for a separate antenna or the entire device.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.GetStatistics(System.String)">
            <summary>
            EXPERIMENTAL (may change)!  Actually retrieves from the reader statistics information related to tag operations for specified antenna.
            </summary>
            <param name="antenna">Must be an Alien antenna name (e.g.: "0", "1", etc.)</param>
            <returns>AlienStatistics object with all field set (including the antenna name.)</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.BlinkLED(System.String,System.String,System.String,System.String)">
            <summary>
            Causes the reader to cycle LED status lights between specified two states for specified duration and number of times.
            </summary>
            <param name="mask1">Decimal bitmask for first LED state.  Valid values: 0...255.</param>
            <param name="mask2">Decimal bitmask for second LED state.  Valid values: 0...255.</param>
            <param name="duration">Duration in milliseconds to hold each output state. Valid values: 10...2500.</param>
            <param name="count">Number of times to cycle through the two states.  Valid values: 0...255.</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.GetCurrentMessages(System.String[]@)">
            <summary>
            Retrieves an array of currently collected messages in case when nobody 
            has subscribed to the MessageReceived event.  This method is suetable for applications
            developed in a synchronous model (e.g.: Visual Basic 6.)  Instead of complex management of events raised
            on a thread different from main GUI thread, these applicationcan can just  periodically call this method synchronously.
            <seealso cref="M:nsAlienRFID2.clsReader.ClearCurrentMessages"/>
            <seealso cref="P:nsAlienRFID2.clsReader.MaxMessagesCount"/>
            <seealso cref="E:nsAlienRFID2.clsReader.MessageReceived"/>
            <seealso cref="M:nsAlienRFID2.clsReader.GetCurrentUpgradeMessages(nsAlienRFID2.IAlienUpgradeInfo[]@)"/>
            </summary>
            <param name="sa">Array of strings currently not yet 
            delivered to a subscriber.  The maximum number of Messages has been defined
            by the MaxMessagesCount property. </param>
            <returns>Number of messages in the array.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ClearCurrentMessages">
            <summary>
            Clears the internal collection of asynchronous messages.
            This method doesn't apply to the Upgrade Messages.
            <seealso cref="M:nsAlienRFID2.clsReader.GetCurrentMessages(System.String[]@)"/>
            <seealso cref="P:nsAlienRFID2.clsReader.MaxMessagesCount"/>
            <seealso cref="E:nsAlienRFID2.clsReader.MessageReceived"/>
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReader.GetCurrentUpgradeMessages(nsAlienRFID2.IAlienUpgradeInfo[]@)">
            <summary>
            Retrieves an array of currently collected objects for progress of a running reader's upgrade in case when nobody 
            has subscribed to the UpgradeProgress and UpgradeComplete events.  This method is suetable for applications
            developed in a synchronous model (e.g.: Visual Basic 6.)  Instead of complex management of events raised
            on a thread different from main GUI thread, these applicationcan can just  periodically call this method synchronously.
            NOT available in the Alien Mobile API.
            <seealso cref="M:nsAlienRFID2.clsReader.UpgradeFirmware(System.String)"/>
            <seealso cref="M:nsAlienRFID2.clsReader.CancelUpgrade"/>
            <seealso cref="M:nsAlienRFID2.clsReader.ClearCurrentUpgradeMessages"/>
            <seealso cref="P:nsAlienRFID2.clsReader.MaxUpgradeMessagesCount"/>
            </summary>
            <param name="oa">Array of objects of type UpgradeInfo currently not yet 
            delivered to any subscriber.  The maximum number of objects in the retrieved array has been defined
            by the MaxUpgradeMessagesCount property. </param>
            <returns>Number of objects in the array.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReader.ClearCurrentUpgradeMessages">
            <summary>
            Clears the internal collection of asynchronous upgrade messages.
            This method applys only to the messages generated during reader's upgrade 
            and doesn't affect any other general reader's messages.
            NOT available in the Alien Mobile API.
            <seealso cref="M:nsAlienRFID2.clsReader.GetCurrentUpgradeMessages(nsAlienRFID2.IAlienUpgradeInfo[]@)"/>
            <seealso cref="P:nsAlienRFID2.clsReader.MaxUpgradeMessagesCount"/>
            <seealso cref="E:nsAlienRFID2.clsReader.UpgradeProgress"/>
            <seealso cref="E:nsAlienRFID2.clsReader.UpgradeComplete"/>
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReader.UpgradeFirmware(System.String)">
            <summary>
            Initiates upgrading reader's firmware with the specified firmware file.
            Result has been reported by UpgradeComplete and UpgradeProgress events.
            NOT available in the Alien Mobile API.
            <seealso cref="M:nsAlienRFID2.clsReader.CancelUpgrade"/>
            <seealso cref="E:nsAlienRFID2.clsReader.UpgradeProgress"/>
            <seealso cref="E:nsAlienRFID2.clsReader.UpgradeComplete"/>
            </summary>
            <param name="fullPath">Full path and name of the firmware file.</param>
        </member>
        <member name="M:nsAlienRFID2.clsReader.CancelUpgrade">
            <summary>
            Cancels upgrading reader's firmware performed initiated by the UpgradeFirmware() method.
            Raises the UpgradeComplete event with the Cancelled property of the UpgradeInfo object set to true.
            NOT available in the Alien Mobile API.
            <seealso cref="M:nsAlienRFID2.clsReader.UpgradeFirmware(System.String)"/>
            <seealso cref="E:nsAlienRFID2.clsReader.UpgradeProgress"/>
            <seealso cref="E:nsAlienRFID2.clsReader.UpgradeComplete"/>
            </summary>
        </member>
        <member name="E:nsAlienRFID2.clsReader.DataReceived">
            <summary>
            Raised when an Alien Reader  object receives a line of data (usually 
            terminated by the line-terminator: "\r\n") from reader.
            </summary>
            <remarks>Raised on an AsyncCallBack thread.</remarks>
        </member>
        <member name="E:nsAlienRFID2.clsReader.MessageReceived">
            <summary>
            Raised when an Alien Reader object receives a complete message 
            terminated by the "\0" from reader. 
            </summary>
            <remarks>Raised on an AsyncCallBack thread.</remarks>
        </member>
        <member name="E:nsAlienRFID2.clsReader.Connected">
            <summary>
            Raised when an Alien Reader  object has successfully 
            connected to a TCP client socket or opened an existing serial port.
            </summary>
        </member>
        <member name="E:nsAlienRFID2.clsReader.Disconnected">
            <summary>
            Raised when an Alien Reader object disconnected from TCP client socket
            or closed an opened previously serial port.
            </summary>
        </member>
        <member name="E:nsAlienRFID2.clsReader.UpgradeProgress">
            <summary>
            Event raised during the reader's firmware upgrade initiated by the UpgradeFirmware() method.
            NOT available in the Alien Mobile API.
            <seealso cref="M:nsAlienRFID2.clsReader.UpgradeFirmware(System.String)"/>
            <seealso cref="M:nsAlienRFID2.clsReader.CancelUpgrade"/>
            <seealso cref="E:nsAlienRFID2.clsReader.UpgradeComplete"/>
            <seealso cref="T:nsAlienRFID2.UpgradeInfo"/>
            </summary>
        </member>
        <member name="E:nsAlienRFID2.clsReader.UpgradeComplete">
            <summary>
            Event raised after completion of the reader's firmware upgrade initiated by the UpgradeFirmware() method.
            NOT available in the Alien Mobile API.
            <seealso cref="M:nsAlienRFID2.clsReader.UpgradeFirmware(System.String)"/>
            <seealso cref="E:nsAlienRFID2.clsReader.UpgradeProgress"/>
            <seealso cref="M:nsAlienRFID2.clsReader.CancelUpgrade"/>
            <seealso cref="T:nsAlienRFID2.UpgradeInfo"/>
            </summary>
        </member>
        <member name="E:nsAlienRFID2.clsReader.AlienChannelDown">
            <summary>
            Raised when Alien Notifications from reader can not reach a host listener on network.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.Function">
            <summary>
            CLI Property.  Gets / Sets string representing Alien reader state (function.)
            Not all reader properties and commands are available all the time. 
            This depends on the current reader state (function).  The Function property 
            is used for managing the availability of commands and other properties
             and helps to prevent damage or misuse of readers and tags.
             Valid values are: "Reader", "Programmer".
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <example><code>mReader.Function = "Programmer";</code></example>
        </member>
        <member name="P:nsAlienRFID2.clsReader.Info">
            <summary>
            CLI Property.  Gets a multiple-line list of current reader's settings.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.UserName">
            <summary>
            CLI Property.  Gets / Sets current user name (default = "alien")
            Note: The value of user name has been used for network connection to the reader
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.Password">
            <summary>
            CLI Property.  Gets / Sets current password.
            <para> If reader is not connected throws an exception.</para>
            Note: The value of password has been used for network connection to the reader.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.Antenna">
            <summary>
            CLI Property.  Gets / Sets string representing decimal number of current antenna that
            reader uses for programming (ProgAntenna.)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.MaxAntenna">
            <summary>
            CLI Property.  Read-only property that returns the number of the maximum addressable
            antenna port of the reader.  Antenna ports are numbered starting at zero,
            so the actual number of ports is one more than the MaxAntenna value.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AntennaSequence">
            <summary>
            CLI Property.  Sets / Gets string containing comma-separated antenna numbers 
            that the reader cycles through as it performs reads.
            Alien Reader has variable number of antennae that are numbered starting 0.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgAntenna">
            <summary>
            CLI Property.  Gets / Sets string representing decimal number of current antenna that
            reader uses for programming (ProgAntenna.)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.DHCP">
            <summary>
            CLI Property.  Gets / Sets string describing status of the DHCP as "ON" or "OFF".
            <para> If reader is not connected throws an exception.</para>
            <Note>Reader rebooting is required for changes to take place.</Note>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IPAddress">
            <summary>
            CLI Property.  Gets / Sets the current IP address from / to the connected reader.
            If the reader is not connected, throws an exception.
            <Note>Reader rebooting is required for changes to take place.</Note>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.Gateway">
            <summary>
            CLI Property.  Gets / Sets gateway server IP address string for manual configuration
            the reader on the network.  
            <para> If reader is not connected throws an exception.</para>
            <Note>Reader rebooting is required for changes to take place.</Note>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.Netmask">
            <summary>
            CLI Property.  Gets / Sets Netmask value as string for manual network configuration of the reader
            <para> If reader is not connected throws an exception.</para>
            <Note>Reader rebooting is required for changes to take place.</Note>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.DNS">
            <summary>
            CLI Property.  Gets / Sets DNS as a string for manual reader configuration on the network.
            <para> If reader is not connected throws an exception.</para>
            <Note>Reader rebooting is required for changes to take place.</Note>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.MACAddress">
            <summary>
            CLI Property.  Read-only property that returns string representing the reader’s MACAddress 
            value as a part of network configuration. 
            A Media Access Control Address uniquely identifies each device with a network interface. 
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NetworkTimeout">
            <summary>
            CLI Property.  Gets / Sets string representing decimal value of the timeout interval (in seconds)
            for open TCP socket connection when there is NO network data communication with the reader.
            Default value is 90 seconds.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.CommandPort">
            <summary>
            CLI Property.  Gets / Sets string representing decimal value of the current
            port number used for TCP network communication. 
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.UpgradeIPAddress">
            <summary>
            CLI Property.  Gets / Sets string representing IP Address for automated upgrading.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.UpgradePort">
            <summary>
            CLI Property.  Gets / Sets number of the network port for automated upgrading.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NetworkUpgrade">
            <summary>
            CLI Property.  Gets / Sets string identifying if the network upgrade is On or Off.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.HeartbeatPort">
            <summary>
            CLI Property.  Gets / Sets string representing decimal value of the current port number 
            for broadcasting reader's Heartbeats.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.HeartbeatTime">
            <summary>
            CLI Property.  Gets / Sets string representing time period (in seconds) between reader's Heartbeat messages.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.HeartbeatAddress">
            <summary>
            CLI Property.  Gets / Sets string representing IP Address where to send heartbeats to.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TimeServer">
            <summary>
            CLI Property.  Gets / Sets string containing IP address of an Internet time server for adjusting 
            reader's internal clock every time it is rebooted.  
            Default value is "132.163.4.101" (a primary NIST network time server.)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TimeZone">
            <summary>
            CLI Property.  Gets / Sets string representing decimal value of the current time zone 
            for automatic adjusting the reader's internal clock with an Internet Time server.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ExternalOutput">
            <summary>
            CLI Property.  Gets / Sets string representing decimal value of the bit mask 
            describing state of the external output pins.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ExternalInput">
            <summary>
            CLI Property.  Gets a string representing decimal value of the bit mask settings
             of the external Input pins.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.InitExternalOutput">
            <summary>
            CLI Property.  Gets / Sets integer in decimal format that is a bit map of the value 
            used to set the external output state during the reader's startup.  
            Bit 0 represents the state of pin 0, bit 1 represents the state of pin 1, etc.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.InvertExternalInput">
            <summary>
            CLI Property.  Gets / Sets On-Off string representing reader's property that provides / defines 
            whether the External Input pin values are inverted
            (pin value of “1” corresponds to the low pin voltage and vice versa.)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.InvertExternalOutput">
            <summary>
            CLI Property.  Gets / Sets On-Off string representing reader's property that provides / defines
            whether the External Output pin values are inverted 
            (pin value of “1” corresponds to the low pin voltage and vice versa.)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TagList">
            <summary>
            CLI Property.  Gets internal reader's tag list as multi-line string.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TagListCustomFormat">
            <summary>
            CLI Property.  Gets / Sets string representation of the custom tag list format.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TagListAntennaCombine">
            <summary>
            CLI Property.  Gets / Sets string value representing if the count parameter for a tag in the 
            Tag list calculated for all antennae.  Valid values: "ON" or "OFF".
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoMode">
            <summary>
            CLI Property.  Gets / Sets string representing Auto mode state ("ON" or "OFF")
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoWaitOutput">
            <summary>
            CLI Property.  Gets / Sets string representing the output pin settings to effect while in the Wait-state
            of Auto mode.
            Valid values -1 to 255.
            For example: AutoWaitOutput = "3";	//Turn pins 0 and 1 to high
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoStartTrigger">
            <summary>
            CLI Property.  Gets / Sets string representing the external input pins to monitor to cause the Auto mode
            to jump from the wait-state to workp-state.
            For example: AutoStartTrigger = "3, 0";	// Listen fro rising edges on pins 0 and 1
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoWorkOutput">
            <summary>
            CLI Property.  Gets / Sets string representing the output pin settings to effect while in the work-state
            of Auto mode.
            Valid values -1 to 255.
            For example: AutoWorkOutput = "3";	// Turn pins 0 and 1 to high
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoAction">
            <summary>
            CLI Property.  Gets / Sets string representing the action to perform when running in the work-state of 
            the Auto mode ("Acquire" (default), "Program", "Erase", "Program and Lock", "Kill", "ProgramUse", "ProgramAndLockUser", "ProgramAlienImage")
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoStopTrigger">
            <summary>
            CLI Property.  Gets / Sets string representing the external input pins to monitor to cause the Auto mode
            to jump from work-state to evaluate-state.
            For example: AutoStopTrigger = "3, 0";	// rising edges on pins 0 and 1
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoStopTimer">
            <summary>
            CLI Property.  Gets / Sets string representing the time period (in milliseconds) used for time-based
            jump from work-state to evaluate-state.
            For example: AutoStopTimer = "1000";	//Acquire for 1 sec then evaluate
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoTruePause">
            <summary>
            CLI Property.  Gets / Sets string representing a milliseconds pause to effect after AutoTrueOutput command
            if the Evaluation-mode evaluates to true.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoTrueOutput">
            <summary>
            CLI Property.  Specifies  the output pin settings to effect if the Evaluation-mode of Auto mode evaluates to true.
            Valid values -1 to 255.
            For example: AutoTrueOutput = "3";	//Turn pins 0 and 1 to high
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoFalsePause">
            <summary>
            CLI Property.  Specifies string representing a millisecond pause to effect if the Autonomous Evaluation mode evaluates to false.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoFalseOutput">
            <summary>
            CLI Property.  Specifies string representing  the output pin settings to effect if the Evaluation mode
            of Auto mode evaluates to false.
            Valid values -1 to 255.
            For example: AutoFalseOutput = "3";		// Turn pins 0 and 1 to high
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoModeStatus">
            <summary>
            CLI Property.  Gets string representing an integer (in decimal format) 
            that specifies current state of the Auto mode state machine.
            ("0" - OFF, "10" - Initializing, "20" - listening for a start trigger, "30" - starting its action, 
            "40" - processing Action, "50" - listening for Stop condition, "60" - entering Evaluation stage,
            "70" - 'true' or 'false' pause stage, "80" - notify stage)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NotifyMode">
            <summary>
            CLI Property.  Gets / Sets String specifying current Notify mode ("ON" or "OFF".)
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <example><code>mReader.NotifyMode = "OFF";</code></example>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NotifyFormat">
            <summary>
            CLI Property.  Gets / Sets string representing current Notify format ("Text", "XML", "Custom")
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NotifyTime">
            <summary>
            CLI Property.  Gets / Sets string representing time interval (in seconds) for sending out Notification messages.
            (Default = "30".)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NotifyHeader">
            <summary>
            CLI Property.  Gets / Sets On-Off string representing reader's property that provides / defines
            whether the notification messages contain all fields or the tag list only.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <example><code>mReader.NotifyHeader = "OFF";</code></example>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NotifyAddress">
            <summary>
            CLI Property.  Gets / Sets string specifying where Notification messages should be sent to.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <example>
            <code>mReader.NotifyAddress = "serial";	//	OR</code>
            <code>mReader.NotifyAddress = "user@msn.com";	// OR</code>
            <code>mReader.NotifyAddress = "10.1.0.12:4000";</code></example>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NotifyTrigger">
            <summary>
            CLI Property.  Gets / Sets string representing the event conditions other than time-based for sending 
            Notification messages.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <example><code>
            mReader.NotifyTrigger = "Remove";	// Send message when a tag is removed from the Tag list.
            </code></example>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NotifyKeepAliveTime">
            <summary>
            CLI Property.  Gets / Sets string representing time period (in seconds) that the reader will keep 
            the TCP socket open after sending a notification messages.
            Default is 30.  Value ranges from 1 to 32767.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <example><code>
            mReader.NotifyKeepAliveTime = "90";</code></example>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NotifyRetryCount">
            <summary>
            CLI Property.  Gets / Sets number of times the reader will try to send a notifycation
            before giving up and turning Off NotifyMode.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NotifyRetryPause">
            <summary>
            CLI Property.  Gets / Sets number of seconds for reader to wait between sequential 
            attempts to sent a notification successfully.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.MailServer">
            <summary>
            CLI Property.  Gets / Sets string representing an SMTP mail server for sending Notification over e-Mail.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.MailFrom">
            <summary>
            CLI Property.  Gets / Sets string representing sender address in the Notifications sent via e-Mail.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgramPassCode">
            <summary>
            CLI Property.  Gets / Sets string representing the pass-code used by the Lock command for automatic programming.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgramID">
            <summary>
            CLI Property.  Gets / Sets Hexadecimal string of a tag ID to program (for automatic programming.)
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgIncrementOnFail">
            <summary>
            CLI Property.  Gets / Sets the On-Off string defining if the reader will increment the 
            ProgramID after an unsuccess programming.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgSuccessFormat">
            <summary>
            CLI Property.  Gets / Sets integer value indicating which string the reader returns on successful 
            programming: if ProgSuccessFormat = 0 - reader returns "Success!", 
            if 1 - reader returns programmed ID. 
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.HeartbeatCount">
            <summary>
            CLI Property.  Gets / Sets integer value indicating the total number of heartbeats to 
            send out after rebooting.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <value> * Default value is -1 (reader sends heartbeats continuously all the time.
            * Value 0 is for not sending any heartbeat.
            * Valid values are up to 65535.</value>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoStartPause">
            <summary>
            CLI Property.  Gets / Sets number of milliseconds to wait after receiving a start
            trigger before starting the AutoMode.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoStopPause">
            <summary>
            CLI Property.  Gets / Sets number of milliseconds to wait after receiving a stop
            trigger before starting the AutoMode.  This delay apply only when IO trigger stops the reader and 
            not when the AutoAction is stopped because of the AutoStopTimer expiring.
            Default value is 0 (no delay.)
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.RFLevel">
            <summary>
            CLI Property.  Gets / Sets an integer number representing reader's RF output power in dB/10.
            This property is complementary to the RFAttenuation.  It is calculated by the 
            following formula "RFLevel = MaxPower - FRAttenuation."  Default value equals MaxPower (316.)
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.RFModulation">
            <summary>
            CLI Property.  Gets / Sets string value that specifies modulation mode for the Gen2 protocol.
            Valid values: "25FMO" (same as "STD" for Standard) , "06FMO" (same as "HS"" for High Speed), "25M4"(default, same as "DRM" for Dense Reader Mode), "12M4", or "06M4".
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.LBT">
            <summary>
            CLI Property.  Gets / Sets "On/Off" value specifying state of the Alien Listen-Before-Talk feature that has been used with AutoMode.
            Alien LBT functionality is NOT the same as the one used in the ETSI context.
            In opposite to the ETSI LBT, the Alien LBT is a "wide band" measurement of all the RF
            energy across the frequency band 902-928 MHz, it is a fast measurement (~1msec), and 
            requires no special hardware.  Default value is "Off."
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.LBTvalue">
            <summary>
            CLI Property.  Read-only property representing value of current RF energy detected.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.LBTlimit">
            <summary>
            CLI Property.  Gets / Sets integer representing threshold value for LBT operation in AutoMode.
            Valid values are 0 to 4095.  Defaul value is 1000.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TagListMillis">
            <summary>
            CLI Property.  Gets / Sets "On/Off" value specifying whether the millisecond resolution
            has been enabled in tag reads timestamp.  Default value is "Off."
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgProtocol">
            <summary>
            CLI Property.  Gets / Sets integer value representing the tag protocol for subsequent programming operations.
            Valid values: 0 for Class0, 1 for Class1 (both 64- and 96-bit tags), and 2 (default) for Class1 Gen2.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.HostName">
            <summary>
            CLI Property.  Gets / Sets current reader's host name on the network.
            May be overriden by DHCP server.
            The HostName must be between 1 and 15 characters in length.
            Default is "alien-xxyyzz", where xx, yy, and zz are the last three bytes of the reader's MAC address.
            Changes to the HostName take effect immediately.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgEPCData">
            <summary>
            CLI Property.  This Get/Set property (same as 'ProgramID') stores an EPC ID value for use with subsequent 'ProgramEPC' methods
            when the latter has an empty string or null parameter.  This data is also used when AutoMode
            is running with the AutoAction set to "ProgramEPC" or "ProgramAndLockEPC."
            For Class1 tags this property is identical to the 'ProgramID'
            Hexadecimal string includes space-separated list of bytes.  E.g.: "80 00 01 02 03 04 05 06 07 08 09 0A"
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgUserData">
            <summary>
            CLI Property.  This Get/Set property stores user data for use with subsequent 'ProgramUser' methods, 
            when the latter has an empty string or null parameter.  Some Gen2 tags may not support USER memory
            and the amount of data allowed in the USER memory bank may varie also.
            Hexadecimal string includes space-separated list of bytes.  E.g.: "DE AD BE EF CA FE"
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgEPCDataInc">
            <summary>
            CLI Property.  Get/Set property that specifies when and if reader automatically increments the 'ProgEPCData' value 
            after programming an EPC ID.  The valid values are (case-insencitive): "OFF", "Success", "Fail", "Always."
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgUserDataInc">
            <summary>
            CLI Property.  Get/Set property that specifies when and if reader automatically increments the 'ProgUserData' value 
            after programming Gen2 tags USER bank.  Valid values are (case-insencitive): "OFF", "Success", "Fail", "Always."
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgG2LockType">
            <summary>
            CLI Property.  Get/Set property that stores the type of a lock to be performed in subsequent Gen2 lock operations.
            The EPC, Kill Password, Access Password, and User data (where supported) can all be locked with different lock types.
            Valid values are (case-insencitive): "Lock", "PermaLock", "PermaUnlock."
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgC1KillPwd">
            <summary>
            CLI Property.  This Get/Set property (same as the 'ProgramPassCode') stores the necessary data when none is included
            in the 'Lock' or 'ProgramKillPwd' methods.  This data is also used in when AutoMode is running with the
            AutoAction set to 'ProgramAndLockEPC' when using C1 tags.  Class1 Gen1 tags take a single byte for a Kill Password.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgG2KillPwd">
            <summary>
            CLI Property.  This Get/Set property stores the necessary data when none is uncluded in the 'PrograKillPwd' method.
            Gen2 tags take four bytes for a Kill Password.  Not all Gen2 tags support a Kill Password.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgG2AccessPwd">
            <summary>
            CLI Property.  This Get/Set property stores the necessary data when none is included in the 'ProgramAccessPwd' method.
            Gen2 tags take four bytes for an Access Password. Not all Gen2 tags support an Access Password.
            <seealso cref="P:nsAlienRFID2.clsReader.AcqG2AccessPwd"/>
            </summary>
            <remarks>NOTE: This property DOES NOT store the value that is used by the reader 
            to gain access to a password-protected tag.  Use the 'AcqG2AccessPwd' property instead.
            </remarks>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AcqG2AccessPwd">
            <summary>
            CLI Property.  This Get/Set property stores the necessary Access Password that is required by the tag in the 
            "secure" state, which allows lock/unlock operations.  If a tag has a non-zero Access Password, 
            the reader must provide the same password value to enable locking/unlocking.  Reader then uses
            this value automatically in every lock/unlock operation.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TagStreamMode">
            <summary>
            CLI Property.  Get/Set property that turns on/off tag streaming, which is the quickest way of receiving tag data.
            This feature does NOT affect the existing taglist buffering functions in the reader.
            Valid values are (case insencitive): "ON", "Off."
            <seealso cref="P:nsAlienRFID2.clsReader.TagStreamAddress"/>
            <seealso cref="P:nsAlienRFID2.clsReader.TagStreamFormat"/>
            <seealso cref="P:nsAlienRFID2.clsReader.TagStreamCustomFormat"/>
            <seealso cref="P:nsAlienRFID2.clsReader.TagStreamKeepAliveTime"/>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IOStreamMode">
            <summary>
            Get/Set property that turns on/off reader's Digital IO streaming.
            Valid values are (case insencitive): "ON", "Off."
            <seealso cref="P:nsAlienRFID2.clsReader.IOStreamAddress"/>
            <seealso cref="P:nsAlienRFID2.clsReader.IOStreamFormat"/>
            <seealso cref="P:nsAlienRFID2.clsReader.IOStreamCustomFormat"/>
            <seealso cref="P:nsAlienRFID2.clsReader.IOStreamKeepAliveTime"/>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TagStreamAddress">
            <summary>
            CLI Property.  Gets / Sets string specifying where reader sends its TagStream event messages to.
            </summary>
            <example>
            <code> mReader.TagStreamAddress = "serial"; </code>
            <code> mReader.TagStreamAddress = "10.1.0.12:4000"; </code>
            <code> mReader.TagStreamAddress = "user@msn.com"; </code></example>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IOStreamAddress">
            <summary>
            CLI Property.  Gets / Sets string specifying where reader sends its IOStream event messages to.
            </summary>
            <example>
            <code>mReader.IOStreamAddress = "serial"; </code>
            <code> mReader.IOStreamAddress = "10.1.0.12:4000"; </code>
            <code> mReader.IOStreamAddress = "user@msn.com"; </code></example>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TagStreamFormat">
            <summary>
            CLI Property.  Gets / Sets string representing current TagStream format ("Text", "XML", "Terse", "Custom")
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IOStreamFormat">
            <summary>
            CLI Property.  Gets / Sets string representing current IOStream format ("Text", "XML", "Terse", "Custom")
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TagStreamKeepAliveTime">
            <summary>
            CLI Property.  Gets / Sets string representing time period (in seconds) that the reader will keep 
            the TCP socket open after sending a TagStream messages.
            Default is 30.  Value ranges from 1 to 32767.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <example><code>mReader.TagStreamKeepAliveTime = "90";</code></example>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IOStreamKeepAliveTime">
            <summary>
            CLI Property.  Gets / Sets string representing time period (in seconds) that the reader will keep 
            the TCP socket open after sending an IOStream messages.
            Default is 30.  Value ranges from 1 to 32767.
            <para> If reader is not connected throws an exception.</para>
            </summary>
            <example><code>mReader.IOStreamKeepAliveTime = "90";</code></example>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TagStreamCustomFormat">
            <summary>
            CLI Property.  Gets / Sets string which specifies the exact formatting of data in TagStream messages.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IOStreamCustomFormat">
            <summary>
            CLI Property.  Gets / Sets string which specifies the exact formatting of data in IOStream messages.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IOType">
            <summary>
            CLI Property.  Specifies which IO events to track and report:
            <list type="bullet">
            <item><description>eIOType.DI - inputs only</description></item>
            <item><description>eIOType.DO - outputs only</description></item>
            <item><description>eIOType.DIO - inputs and outputs, interleaved by event time</description></item>
            <item><description>eIOType.DIDO - inputs followed by outputs (not interleaved)</description></item>
            </list>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IOListFormat">
            <summary>
            CLI Property.  Gets / Sets string representing current IOList format ("Text", "XML", "Terse", "Custom")
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IOListCustomFormat">
            <summary>
            CLI Property.  Gets / Sets string which specifies the exact formatting of data in an IOList message.
            <para> If reader is not connected throws an exception.</para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NotifyInclude">
            <summary>
            CLI Property.  Specifies which fields are included into notification messages 
            along with (or instead of) tag list:
            <list type="bullet">
            <item><description>eNotifyInclude.Tags - TagList only</description></item>
            <item><description>eNotifyInclude.All - TagList and IOList</description></item>
            <item><description>eNotifyInclude.DIO - IOList only (inputs and outputs)</description></item>
            <item><description>eNotifyInclude.DI - inputs from IOList only</description></item>
            <item><description>eNotifyInclude.DO - outputs from IOList only</description></item>
            </list>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.NotifyQueueLimit">
            <summary>
            CLI Property.  This property allows spedifying how many failed notification mesasges the reader 
            can queue for later delivery.  (Once this limit is reached, older messages will be dropped
            in favor of newer messages.)
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IOList">
            <summary>
            CLI Property.  Read-only property which returns (and clears) current IOList.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.DSPVersion">
            <summary>
            Returns string with the version of DSP bits along with the configuration and 
            locality information that may be useful to Alien Support in troubleshooting matters.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ETSIMode">
            <summary>
            The standard ETSI mode that the ALR-8800 reader operates under is the EN 302 208 standard. 
            The ALR-8800 can be directed to meet the requirements of the EN 300 220 standard with the ETSIMode command.
            The reader should be rebooted in order for changes to the ETSIMode to take full effect. 
            After the ETSIMode is changed, the ReaderType reflects the new regulatory standard as well.
            Valid values: "302.208"(default) and "300.220"
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.DHCPTimeout">
            <summary>
            Gets / Sets maximum amount of time (in seconds) for reader to wait an IP Address assigned by DHCP.
            Default value is 30 seconds.
            <Note>Reader rebooting is required for changes to take place.</Note>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.WWWPort">
            <summary>
            The reader's web server normally listens on port 80 (default) for incoming connections (the default www port). 
            The WWWPort can be changed to any allowed port number, although care must be taken
            not to use port number that is commonly used for other services, such as telnet, NTP, SNMP, etc.
            Valid values: 0...65535.  Value 0 will disable the reader's web server and can affect firmware upgrade abilities.
            Change takes place immediately.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.HostLog">
            <summary>
            The HostLog dumps a log of all the host activity (connects, disconnects, timeouts, etc.)
            This can be used to figure out when connections were made to the reader, whether serial or TCP, 
            and the IP address of the connecting host (if TCP).  HostLog data is reset each time the reader boots
            and will periodically be rotated out causing older log entries to be lost.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.DebugHost">
            <summary>
            ON/OFF value indicating whether reader should log each and every command that is issued to the reader. 
            The list of commands is viewed with the HostLog command.
            <seealso cref="P:nsAlienRFID2.clsReader.HostLog"/>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgAlienImageMap">
            <summary>
            String that specifies how a Class1 Gen2 tag will be programmed
            when a subsequent ProgramAlienImage command will be issued.  
            Valid values: "Higgs2_96" (same as "EPC96"), "Higgs2_128" (same as "EPC128"), "Higgs2_96U64 (same as "EPC96USER64"),
            "Higgs3", Higgs3_96".
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgAlienImageNSI">
            <summary>
            Hexadecimal string of space-separated bytes, that specifies 
            how the NSI (Numbering System Identifier) field of a Class1 Gen2 tag will be programmed
            when a subsequent ProgramAlienImage command will be issued.  
            Valid values: Hexadecimal string with a contents of NSI field.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AcqG2TagData">
            <summary>
            String specifying which parts of tag memory to read.  Up to 4 parts (separated by '|' character) could be specified.
            Valid values: "0" for none or decimal numbers in following format for each part:  [Bank], [WordPtr], [WordCnt]
            Example: AcqG2TagData = "1,1,2 | 3,0,2"
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.SpeedFilter">
            <summary>
            Allows to get only those tags that have particular velocity, measured in m/s.
            <para>E.g.: SpeedFilter = -1.5, 1.5 allows to read only tags with velocity between these value; 
            SpeedFilter = 1.5, -1.5 makes visible only tags that move faster or slower than indicated values.
            </para>
            <remarks><para>In case of multiple ranges (up to 4) separated by the '|' character 
            tag will be reported if it fits at least one of them.</para>
            <para>Use default value of "0" to not to use SpeedFilter.</para></remarks>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.RSSIFilter">
            <summary>
            Allows to get only those tags that have particular signal strength.
            <para>E.g.: RSSIFilter = 0, 35000 allows to read only tags with RSSI between these value; 
            RSSIFilter = 35000, 5000 makes visible only tags with RSSI lower or higher than indicated values.
            </para>
            <remarks><para>In case of multiple ranges (up to 4) separated by the '|' character 
            tag will be reported if it fits at least one of them.</para>
            <para>Use default value of "0" to not to use RSSIFilter.</para></remarks>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AcqG2AntennaCombine">
            <summary>
            ON/OFF value specifying how the reader "wakes" tags during inventory.  
            The default "ON" value forces a single "select" command on all enabled antennas at once.
            The "OFF" value causes separate "select" command on each used antenna.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AcqG2Target">
            <summary>
            Specifies state transition for Gen2 tags during an inventory (from A to B, or opposite, ...)
            Valid values: "A" (default) indicates that reader "selects" all tags that are in A state and moves them to B state;
            "B" causes all tags in B state selected; "AB" - changes selection every inventory, generally producing more redundant tag reads. 
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.MyData">
            <summary>
            This reader property is a 254-character scratchpad to store arbitrary data.
            NOTE:  "MyData" has been used by the Alien Provider for BizTalk RFID for storing some properties: e.g. "Event Mode" etc.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ProgDataUnit">
            <summary>
            String specifying which programming method to use for all Gen2 writing operations: "word-by-word" or "block-by-block."
            Valid values: "Word" (default) or "Block".
            NOTE: If you set the ProgDataUnit = "Block" and a tag doesn't support "block-writing", all subsequent programming operations on this tag will fail.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoModeType">
            <summary>
            String specifying which auto mode type is used when there are no tags in the field.
            Valid values: Standard" (default) or "Seek" for reducing RF power (resulting in low RF interferece) when there are no tags.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoSeekTimer">
            <summary>
            Specifies the interval in milliseconds to continue looking for tags (even none are present) before
            entering the sniffing mode.  This property is used only if the AutoModeType is "Seek."
            Valid values: "0"..."86400000."  Default is "500"
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoSeekPause">
            <summary>
            Specifies the interval in milliseconds to pause between sniffs.  
            This property is used only if the AutoModeType is "Seek."
            Valid values: "0"..."86400000."  Default is "250"
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.AutoSeekRFLevel">
            <summary>
            Specifies the RF power level to use while in sniffing mode.
            This property is used only if the AutoModeType is "Seek."
            Valid values are between min and max power for each specific reader model.
            Default is maximum power (e.g.: "316" for ALR-9800 readers.)
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.Logging">
            <summary>
            Value of TRUE allows (FALSE disallows) writing all reader communications to the AlienAPI.log file.
            New value propagates to transport objects on next connection to reader.  This property works in the same way as boolean parameter in 
            constructor's overloads, but makes this functionality available for COM users as well.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ReaderSettings">
            <summary>
            Gets or sets current reader settings in the API in the format of type ReaderInfo.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IsListening">
            <summary>
            Gets boolean value indicating whether the internal library's client socket is 
            currently listening for an asynchronous response from the reader.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IsConnected">
            <summary>
            Gets boolean value representing whether the clsReader object has established
            serial or network connection with an Alien reader.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ReaderState">
            <summary>
            Returns a Hashtable with the current reader's state.  The reader state 
            has been described by the response to the Alien command "i" ("Info".)
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ReaderStateMonitoring">
            <summary>
            Gets / Sets boolean value indicating if the reader object monitors 
            information about the current reader state.  If True enables periodical 
            (with the ReaderStateUpdateInterval) monitoring current reader's state by issuing
            the "Info" command to the reader and storing it in the ReaderState object.
            <para>Default value false.</para>
            </summary>
            <remarks>If there is no reader connection, than reader state monitoring 
            is unavailable and this property will be set to 'false' automatically by the updating 
            routine.</remarks>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ReaderStateUpdateInterval">
            <summary>
            Gets or sets time intervals in seconds for pulling the current information
            about the reader state by issuing the "Info" command.  Used only if the 
            ReaderStateMonitoring property is set to true.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.TimeWaitWhenBusy">
            <summary>
            Gets or sets the number of milliseconds between checks of the availability 
            of the SendReceive() method.
            Default 100 milliseconds.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.RetriesWhenBusy">
            <summary>
            Gets or sets the maximum number of times to check for availability of the 
            SendReceive() method before throwing the "Busy" exception.
            Default 10 times.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ComTimeOutInterval">
            <summary>
            Gets or sets the maximum number of milliseconds to wait for completion of
             a synchronous operation on Serial port or Telnet.
            Default = Min = 60000.  Max = 2147483647.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ConnectionTime">
            <summary>
            Gets or sets the number of milliseconds to wait for completion of TCP connection.
            The Open() method will return only after this waiting time.  This waiting period 
            prevents talking to a socket before its background thread completes connection.  
            If 0, object supposed to talk to socket immediately.  If the socket is not able yet 
            to communicate, you may want to adjust this value for your needs.  
            Default  value = 0.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.SerialPort">
            <summary>
            Gets or sets string value representing current com port name for communicating
            with the reader using RS-232.  Valid values: "COM1:", "COM2:", ..., "COM9:"
            </summary>				
        </member>
        <member name="P:nsAlienRFID2.clsReader.QuitOnSocketFailure">
            <summary>
            Read-write property defining if the ethernet connection to the reader should be 
            terminated on a TCP-socket failure.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ForceUpdates">
            <summary>
            Read-write property defining if the API will execute the requested setting and getting
            some of reader's properties.    
            <para>If set to true, when retrieving or changing for example the AntennaSequence value 
            during the AutoMode set ON, the API will first turn the AutoMode OFF, 
            change the AntennaSequence property value, and then set the AutoMode back ON.
            </para>
            <para>If true, this property also turns off the DHCP automaticaly for all requests to set 
            some network related properties, for example, an IP Address.</para>
            <para>If set to false then, for example,the AntennaSequence could not be 
            retieved or changed during the AutoMode; the IP Address could not be set with DHCP on.  
            An attempt to do so will cause an exception with "Error27".
            </para>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.SerialBaudRate">
            <summary>
            Gets or sets the baud rate for serial communicaiton on both reader and host.
            Reader has to be connected.  
            <para>When setting new baud rate, this property
            first changes the ReaderBaudRate, 
            then SAVES ALL CURRENT SETTINGS to the reader, 
            reboots it, 
            and reconnects using new baud rate value affecting the 'HostBaudRate' and 
            the 'ReaderBaudRate' properties.</para>
            <para>If reader's and host's baudrates are different, this property returns
            string containing both values separated by comma starting from reader's baud rate.</para>
            <remarks>Valid values:
            <list type="bullet">
            <item><description>"115200" (default)</description></item>
            <item><description>"57600"</description></item>
            <item><description>"38400"</description></item>
            <item><description>"19200"</description></item>
            <item><description>"9600"</description></item>
            </list>
            </remarks>
            <para>NOTE: setting this property may take up to 30 seconds.</para>
            For getting/setting host's baud rate see:
            <see cref="P:nsAlienRFID2.clsReader.HostBaudRate"/>.  
            For getting/setting reader's baud rate see:
            <seealso cref="P:nsAlienRFID2.clsReader.ReaderBaudRate"/>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.HostBaudRate">
            <summary>
            Gets or sets the baud rate on HOST to match reader's baud rate.
            Changing this property with a connected reader will throw an exception.
            For getting/setting reader's baud rate value see 'ReaderBaudRate' property.
            <remarks>Valid values:
            <list type="bullet">
            <item><description>115200 (default)</description></item>
            <item><description>57600</description></item>
            <item><description>38400</description></item>
            <item><description>19200</description></item>
            <item><description>9600</description></item>
            </list>
            </remarks>
            <seealso cref="P:nsAlienRFID2.clsReader.ReaderBaudRate"/>
            <seealso cref="P:nsAlienRFID2.clsReader.SerialBaudRate"/>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.ReaderBaudRate">
            <summary>
            Gets or sets the serial communication baud rate on the READER.
            The response and serial communication continues on the old baud rate.  
            For new baud rate value to take effect on the reader a separate
            "Save" command and rebooting are required (not performed by this property.)
            <remarks>Valid values:
            <list type="bullet">
            <item><description>115200 (default)</description></item>
            <item><description>57600</description></item>
            <item><description>38400</description></item>
            <item><description>19200</description></item>
            <item><description>9600</description></item>
            </list>
            </remarks>
            <seealso cref="P:nsAlienRFID2.clsReader.HostBaudRate"/>
            <seealso cref="P:nsAlienRFID2.clsReader.SerialBaudRate"/>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.KeepNetworkConnectionAlive">
            <summary>
            Read-write property specifying if the TCP connection to reader
            that has been open as a Command channel should be kept alive.  
            If this property has been set to 'true', 
            the API periodically sends to reader the "\r\n" alerting messages.  
            The time period for this alert messages depends on value of the 
            'NetworkTimeout' property.  This keeps reader's TCP socket open
            and thus prevents network connection with the reader from timing out.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.MaxMessagesCount">
            <summary>
            Gets / Sets maximum number of messages that can be stored while there are no subscribers to the MessageReceived event.
            Default value is 1000.  When this limit has been reached the oldest message will be automatically removed before adding a new one.
            <seealso cref="M:nsAlienRFID2.clsReader.GetCurrentMessages(System.String[]@)"/>
            <seealso cref="M:nsAlienRFID2.clsReader.ClearCurrentMessages"/>
            <seealso cref="P:nsAlienRFID2.clsReader.MaxUpgradeMessagesCount"/>
            </summary>
            
        </member>
        <member name="P:nsAlienRFID2.clsReader.MaxUpgradeMessagesCount">
            <summary>
            Gets / Sets maximum number of upgrade messages that can be stored while there are no subscribers to the UpgradeProgress 
            and the UpgradeComplete events.
            Default value is 1000.  When this limit has been reached the oldest message will be automatically removed before adding a new one.
            NOT available in the Alien Mobile API.
            <seealso cref="M:nsAlienRFID2.clsReader.GetCurrentUpgradeMessages(nsAlienRFID2.IAlienUpgradeInfo[]@)"/>
            <seealso cref="M:nsAlienRFID2.clsReader.ClearCurrentUpgradeMessages"/>
            <seealso cref="P:nsAlienRFID2.clsReader.MaxMessagesCount"/>
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReader.IsUpgrading">
            <summary>
            TRUE while instance is running a reader firmware upgrade routine.
            NOT available in the Alien Mobile API.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.clsReader.UpgradeProgressEventHandler">
            <summary>
            Event Handler for UpgradeProgress event faired during the reader's firmware upgrade.
            NOT available in the Alien Mobile API.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.clsReader.UpgradeCompleteEventHandler">
            <summary>
            Event Handler for UpgradeComplete event faired when the reader's firmware upgrade has been finished or cancelled.
            NOT available in the Alien Mobile API.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.clsReader.AlienChannelDownEventHandler">
            <summary>
            Alien Notifications from reader can not reach a host server on network.
            NOTE:  Reader must be connected on serial channel for receiving these warning messages and raising these events.
            </summary>
            <param name="message">Message from reader received on open serial channel.</param>
        </member>
        <member name="T:nsAlienRFID2.clsReaderMonitor">
            <summary>
            Defines methods, properties, and events for monitoring of Alien readers.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.#ctor">
            <summary>
            Constructor of the clsReaderMonitor class.  Prepares objects and threads 
            required for listening for the Alien reader's heartbeats over the network.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.#ctor(System.Boolean)">
            <summary>
            Constructor of the clsReaderMonitor class.  Prepares objects and threads 
            required for listening for the Alien reader's heartbeats over the network.
            </summary>
            <param name="log">
            If true and the assembly has been built with Debug configuration
            AlienAPI*.log files get written logging all reader's communications.
            </param>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.Dispose">
            <summary>
            Stops listening over the Alien readers heartbeats and disposes objects.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.ClearAllReaders">
            <summary>
            Clears current reader list for both network and Com ports.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.ClearNetworkReaders">
            <summary>
            Clears current reader list on network.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.ClearSerialReaders">
            <summary>
            Clears current reader list on Com ports.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.GetReaderList(nsAlienRFID2.IReaderInfo[]@)">
            <summary>
            Obtains list of readers currently monitored on both network and Com ports.
            </summary>
            <param name="aReaderList"> 'Out' parameter returns an array of 
            of variables of type ReaderInfo.</param>
            <returns>String "Empty" if there are no readers currently in the reader list, or "".</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.GetReaderListOnSerial(nsAlienRFID2.IReaderInfo[]@)">
            <summary>
            Obtains list of readers currently monitored on Com ports.
            </summary>
            <param name="aReaderList"> 'Out' parameter returns an array of 
            of variables of type ReaderInfo.</param>
            <returns>Number of elements in the returned array.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.GetReaderListOnNetwork(nsAlienRFID2.IReaderInfo[]@)">
            <summary>
            Obtains list of readers currently monitored on network.
            </summary>
            <param name="aReaderList"> 'Out' parameter returns an array of 
            of variables of type ReaderInfo.</param>
            <returns>Number of elements in the returned array.</returns>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.StartListening">
            <summary>
            Starts monitoring Alien readers on network or Com ports or both depending
            on values of the ComPortsMonitoring and NetworkMonitoring properties.
            This method throws exceptions.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.StopListening">
            <summary>
            Stops monitoring Alien readers on both network and Com ports.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.clsReaderMonitor.CheckComPorts">
            <summary>
            Checks active Com ports for presense of an Alien reader.  
            Closes every opened connection upon completion.
            Updates Reader list.  Raises events ReaderAdded, ReaderRemoved, ReaderRenewed 
            as well as ReaderAddedOnSerial, ReaderRemovedOnSerial, ReaderRenewedOnSerial.
            </summary>
            <returns>"No reader found", or an empty string on success.</returns>
        </member>
        <member name="E:nsAlienRFID2.clsReaderMonitor.ReaderAdded">
            <summary>
            Occurs when a new reader has been added to the Reader List either
            by listening to readers' heartbeats over the network or by checking Com ports.
            </summary>
        </member>
        <member name="E:nsAlienRFID2.clsReaderMonitor.ReaderRemoved">
            <summary>
            Occurs when a known reader has been removed from the Reader List either
            by absense of its heartbeat in its heartbeat time, or by not finding it
            on a Com port.
            </summary>
        </member>
        <member name="E:nsAlienRFID2.clsReaderMonitor.ReaderRenewed">
            <summary>
            Occurs periodically (over the UpdateInterval) when readers that had been already 
            included in the Reader List found alive either by their heartbeat or by checking Com ports.
            </summary>
        </member>
        <member name="E:nsAlienRFID2.clsReaderMonitor.ReaderListUpdated">
            <summary>
            Occurs every time the Reader List has been updated either because of the 
            UpdateInterval time has been elapsed or because the CheckComPorts() function
            found a problem or a lost reader.
            </summary>
            <remarks>This event is raised on a Thread Pool thread if the 
            "SynchronizingObject" property is not set.</remarks>
        </member>
        <member name="E:nsAlienRFID2.clsReaderMonitor.ReaderAddedOnSerial">
            <summary>
            Occurs when a new reader has been found on a serial port and added 
            to the Reader List.  
            </summary>
            <remarks>This event is raised either on the thread of caller to
            the "CheckComPorts()" method OR on a Thread Pool thread if the 
            "ComPortsMonitoring == true" and  the "SynchronizingObject" property is not set.
            </remarks>
        </member>
        <member name="E:nsAlienRFID2.clsReaderMonitor.ReaderAddedOnNetwork">
            <summary>
            Occurs when a new reader has been found and added to the Reader List
            by listening to readers' heartbeats over network.
            </summary>
            <remarks>This event is raised on a Thread Pool thread if the 
            "SynchronizingObject" property is not set.</remarks>
        </member>
        <member name="E:nsAlienRFID2.clsReaderMonitor.ReaderRemovedOnSerial">
            <summary>
            Occurs when a known reader has been removed from the Reader List during 
            monitoring readers on serial ports (ComPortMonitoring == true).
            </summary>
            <remarks>This event is raised either on the thread of caller to
            the "CheckComPorts()" method OR on a Thread Pool thread if the 
            "ComPortsMonitoring == true" and  the "SynchronizingObject" property is not set.
            </remarks>
        </member>
        <member name="E:nsAlienRFID2.clsReaderMonitor.ReaderRemovedOnNetwork">
            <summary>
            Occurs when a known reader has been removed from the Reader List during 
            monitoring readers over network (NetworkMonitoring == true).
            </summary>
            <remarks>This event is raised on a Thread Pool thread if the 
            "SynchronizingObject" property is not set.</remarks>
        </member>
        <member name="E:nsAlienRFID2.clsReaderMonitor.ReaderRenewedOnSerial">
            <summary>
            Occurs when a reader that had been already included in the Reader List
            found alive by monitoring over serial ports (ComPortMonitoring == true).
            </summary>
            <remarks>This event is raised either on the thread of caller to
            the "CheckComPorts()" method OR on a Thread Pool thread if the 
            "ComPortsMonitoring == true" and  the "SynchronizingObject" property is not set.
            </remarks>
        </member>
        <member name="E:nsAlienRFID2.clsReaderMonitor.ReaderRenewedOnNetwork">
            <summary>
            Occurs when a reader that had been already included in the Reader List
            found alive by monitoring over network (NetworkMonitoring == true).
            </summary>
            <remarks>This event is raised on a Thread Pool thread if the 
            "SynchronizingObject" property is not set.</remarks>
        </member>
        <member name="P:nsAlienRFID2.clsReaderMonitor.Port">
            <summary>
            Gets or sets integer value of the network port used for the listening 
            for the Alien readers heartbeats.  Settable only when listening stopped 
            or not started.  Default value is 3988.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReaderMonitor.UpdateInterval">
            <summary>
            Sets or gets an integer value in milliseconds determining how often 
            the library internal Reader List gets updated when listening over the network 
            for the Alien readers heartbeats as well as automatic checking the Com Ports.
            Defaul value is 1000 msec.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReaderMonitor.NetworkMonitoring">
            <summary>
            Gets or sets boolean flag indicating whether to monitor the Network on the timely basis.
            If true, the clsReaderMonitor object will monitor network for presense of Alien readers 
            by listening to their heartbeats sent using UDP.
            Default value is true.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReaderMonitor.ComPortsMonitoring">
            <summary>
            Gets or sets boolean flag indicating whether to monitor the Com ports on the timely basis.
            If true, the clsReaderMonitor object will monitor presense of Alien readers on Com ports 
            periodically calling method CheckComPorts().
            Default value is false.  
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReaderMonitor.IsListening">
            <summary>
            Read-only property reporting if clsReaderMonitor object currently is monitoring readers.
            True if the StartListening method has been called.  False otherwise or if the StopListening 
            has been called.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.clsReaderMonitor.SynchronizingObject">
            <summary>
            Get or sets the object used to marshal event-handler that are used when
            the UpdateInterval has elapsed for monitoring Alien reader.  
            If set to a client application window object, will cause all automatic clsReaderMonitor 
            events raised on the main GUI thread but will partially freeze this window.
            If null, all automatic clsReaderMonitor events will be raised on ThreadPool threads.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.clsReaderMonitor.ReaderAddedEventHandler">
            <summary>
            The handler for the ReaderAdded event.
            </summary>
            <param name="data">Variable of type IReaderInfo describing the discovered
            reader.</param>
        </member>
        <member name="T:nsAlienRFID2.clsReaderMonitor.ReaderRemovedEventHandler">
            <summary>
            The handler for the ReaderRemoved event.
            </summary>
            <param name="data">Variable of type IReaderInfo describing the reader that
            has been lost.</param>
        </member>
        <member name="T:nsAlienRFID2.clsReaderMonitor.ReaderRenewedEventHandler">
            <summary>
            The handler for the ReaderRenewed event.
            </summary>
            <param name="data">Variable of type IReaderInfo describing the reader 
            that has been renewed.</param>
        </member>
        <member name="T:nsAlienRFID2.clsReaderMonitor.ReaderListUpdatedEventHandler">
            <summary>
            The handler for the ReaderListUpdated event.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.clsReaderMonitor.ReaderAddedOnSerialEventHandler">
            <summary>
            The handler for the ReaderAddedOnSerial event.
            </summary>
            <param name="data">Variable of type IReaderInfo describing the reader that has
            been discovered on serial port.</param>
        </member>
        <member name="T:nsAlienRFID2.clsReaderMonitor.ReaderAddedOnNetworkEventHandler">
            <summary>
            The handler for the ReaderAddedOnNetwork event.
            </summary>
            <param name="data">Variable of type IReaderInfo describing the reader
            that has been discovered on network.</param>
        </member>
        <member name="T:nsAlienRFID2.clsReaderMonitor.ReaderRemovedOnSerialEventHandler">
            <summary>
            The handler for the ReaderRemovedOnSerial event.
            </summary>
            <param name="data">Variable of type IReaderInfo describing the reader 
            that has been lost on serial port.</param>
        </member>
        <member name="T:nsAlienRFID2.clsReaderMonitor.ReaderRemovedOnNetworkEventHandler">
            <summary>
            The handler for the ReaderRemovedOnNetwork event.
            </summary>
            <param name="data">Variable of type IReaderInfo describing the reader 
            that has been lost on network.</param>
        </member>
        <member name="T:nsAlienRFID2.clsReaderMonitor.ReaderRenewedOnSerialEventHandler">
            <summary>
            The handler for the ReaderRenewedOnSerial event.
            </summary>
            <param name="data">Variable of type IReaderInfo describing the reader 
            that has been renewed on serial port.</param>
        </member>
        <member name="T:nsAlienRFID2.clsReaderMonitor.ReaderRenewedOnNetworkEventHandler">
            <summary>
            The handler for the ReaderRenewedOnNetwork event.
            </summary>
            <param name="data">Variable of type IReaderInfo describing the reader 
            that has been renewed on network.</param>
        </member>
        <member name="T:nsAlienRFID2.IAlienIOInfo">
            <summary>
            COM interface of the IOInfo type.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.AlienIOInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.AlienIOInfo.#ctor(nsAlienRFID2.AlienIOInfo)">
            <summary>
            Copy constructor.
            </summary>
            <param name="ioInfo">AlienIOInfo object to make a copy of.</param>
        </member>
        <member name="M:nsAlienRFID2.AlienIOInfo.ToString">
            <summary>
            Returns string representation of current IO information, 
            where each field name (same as public property names) is separated from its value by a '=' character and
            fields are separated from each other by spaces (empty field values are shown as "NULL".)
            </summary>
            <returns>String with space-separated fields of this instance.</returns>
        </member>
        <member name="P:nsAlienRFID2.AlienIOInfo.IOType">
            <summary>
            Sets / Gets IO Type.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienIOInfo.Time">
            <summary>
            Sets / Gets string representing time of IO event.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienIOInfo.Value">
            <summary>
            Gets / Sets decimal bitmask representing IO port value.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienIOInfo.MACAddress">
            <summary>
            Represents MAC Address of a reader.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.MyAsyncServer">
            <summary>
            This class encapsulates the main program sets up
            the TCP server classes for each local interface specified.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.MyAsyncServer.mbIsListening">
            <summary>
            Indicates if the 'pooledManager()' is still working
            </summary>
        </member>
        <member name="E:nsAlienRFID2.MyAsyncServer.MyServerMessageReceived">
            <summary>
            Event raised when a CAlienServer object received a msg.
            Contains a string with GUID identifying connection sending msg and msg text.
            </summary>
            <remarks>
            This event gets raised on a separate thread created by AsyncCallBack.
            </remarks>
        </member>
        <member name="E:nsAlienRFID2.MyAsyncServer.MyServerConnectionEstablished">
            <summary>
            Event raised when a CAlienServer object accepted an incomming connection request.
            This event contains a unique GUID assigned to newly established connection.
            </summary>
            <remarks>
            This event gets raised on a separate thead created by an AsyncCallBack.
            </remarks>
        </member>
        <member name="E:nsAlienRFID2.MyAsyncServer.MyServerConnectionEnded">
            <summary>
            When a CAlienServer object got a receive call-back with an empty msg (
            this means that connection has been lost) these event gets raised
            containing the GUID identifying lost connection.
            </summary>
            <remarks>
            This event gets raised on a separate thread created by an AsyncCallBack.
            </remarks>
        </member>
        <member name="E:nsAlienRFID2.MyAsyncServer.MyServerListeningStarted">
            <summary>
            Event raised when a CAlienServer object started to listen for incomming
            connection requests.
            </summary>
            <remarks>
            This event gets raised on the same thread as calling StartListening() function.
            </remarks>
        </member>
        <member name="E:nsAlienRFID2.MyAsyncServer.MyServerListeningStopped">
            <summary>
            Event raised when a CAlienServer object stops to listen for incomming
            connection requests.
            </summary>
        </member>
        <member name="E:nsAlienRFID2.MyAsyncServer.MyServerSocketError">
            <summary>
            Event raised whenever a CAlienServer object discoveres an error.
            Contains a string with error msg
            </summary>
            <remarks>
            This event gets raised on a thread where an error occures.
            </remarks>
        </member>
        <member name="P:nsAlienRFID2.MyAsyncServer.activeConnectionsCount">
            <summary>
            Returns number of readers currently conntected to the server.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.MyAsyncServer.MyServerMessageReceivedEventHandler">
            <summary>
            Events handler for raising an event when CAlienServer
            received a msg.
            </summary>
            <param name='msg'>Returns a string containing GUID of connection 
            that has sent this msg followed by a space (" ") and msg text.</param>
        </member>
        <member name="T:nsAlienRFID2.MyAsyncServer.MyServerConnectionEstablishedEventHandler">
            <summary>
            Event handler for raising events when CAlienServer accepted
            an incomming connection request.
            </summary>
            <param name='id'>Returns a string with unique GUID identifying established connection.</param>
        </member>
        <member name="T:nsAlienRFID2.MyAsyncServer.MyServerConnectionEndedEventHandler">
            <summary>
            Event handler for raising events when CAlienServer lost an established connection.
            </summary>
            <param name='id'>Returns a string with GUID of a lost connection.</param>
        </member>
        <member name="T:nsAlienRFID2.MyAsyncServer.MyServerListeningStartedEventHandler">
            <summary>
            Event handler for raising events when CAlienServer started listen for 
            incomming connection requests.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.MyAsyncServer.MyServerListeningStoppedEventHandler">
            <summary>
            Event handler for raising events when CAlienServer stops listen for 
            incomming connection requests.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.MyAsyncServer.MyServerSocketErrorEventHandler">
            <summary>
            Event handler for raising events when a socket error happened in CAlienServer.
            </summary>
            <param name='msg'>Returns a string with an error msg.</param>
        </member>
        <member name="T:nsAlienRFID2.CAlienServer">
            <summary>
            Alien Library class that provides a TCP Server Socket for 
            listening for incomming connections and messages from one or more Alien readers.
            </summary>
            <remarks>
            During asynchronous communication with the reader an object of this class
            raises events on a Thread Pool thread that should not be used for updating GUI.
            </remarks>
        </member>
        <member name="M:nsAlienRFID2.CAlienServer.#ctor">
            <summary>
            Default constructor.  Create the Listener object.  Sets default Port.
            Uses DNS to fill IPAddresses list with resolved values.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.CAlienServer.#ctor(System.Int32)">
            <summary>
            Constructor specifying the connection port.
            Uses DNS to fill IPAddresses list with resolved values.
            </summary>
            <param name="port">Integer specifying connection port. (Default 7797)</param>
        </member>
        <member name="M:nsAlienRFID2.CAlienServer.#ctor(System.Int32,System.String)">
            <summary>
            Constructor specifying connection port and host IP Address.
            The IPAddresses list contains null.
            </summary>
            <param name="port">Integer specifying connection port.</param>
            <param name="address">String specifying host's IP Address</param>
        </member>
        <member name="M:nsAlienRFID2.CAlienServer.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Constructor specifying connection port and host IP Address.
            The IPAddresses list contains null.
            </summary>
            <param name="port">Integer specifying connection port.</param>
            <param name="address">String specifying host's IP Address</param>
            <param name="log">
            If true and the assembly has been built with Debug configuration
            AlienAPI*.log files get written logging all reader's communications.
            </param>
        </member>
        <member name="M:nsAlienRFID2.CAlienServer.Dispose">
            <summary>
            Stops listening and disposes object.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.CAlienServer.StartListening">
            <summary>
            Starts listening for incomming connection requests and messages.
            If the server was listening, stops it with loss of all 
            previously established connections and restarts again.
            Throws exception if there was no IP Address specified previously.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.CAlienServer.ParseNotification(System.String,nsAlienRFID2.INotifyInfo@)">
            <summary>
            Parses an Alien reader Notification string either in the Text or 
            in the XML format into an object of type ReaderInfo and 
            an array of variables of type TagInfo.
            <para>Same implementation as in the AlienUtils.ParseNotification() exposed here as 
            a non-static method for COM interface.</para>
            </summary>
            <param name="sNotification">Input string containing Notification data.
            Must be either in Text or XML format as defined in the Alien Reader Interface Guide.
            Otherwise an exception will be generated.</param>
            <param name="oNotifyInfo">'Out' parameter - an object of type NotifyInfo filled with the 
            information available in the Notification message.</param>
            <returns>Number of tags in the Tag list contained within the Notification message.</returns>
            <remarks>This method throws exceptions.</remarks>
        </member>
        <member name="M:nsAlienRFID2.CAlienServer.GetAllIPAddressesStrings(System.String[]@)">
            <summary>
            Retrieves string array of all IP Addresses of current host resolved by DNS.
            </summary>
            <param name="allIPAddresses">String array containing currently configured IP Addresses.</param>
            <returns>Number of currently configured IP Addresses on local host.</returns>
        </member>
        <member name="M:nsAlienRFID2.CAlienServer.GetCurrentNotifications(nsAlienRFID2.INotifyInfo[]@)">
            <summary>
            Retrieves an array of currently collected Notifications in case when nobody 
            has subscribed to the ServerMessageReceived event.  This method is suitable for applications
            developed in a synchronous model (e.g.: Visual Basic 6.)  Instead of complex management of events raised
            on a thread different from main GUI thread, these applicationcan can just  periodically call this method synchronously.
            </summary>
            <param name="ni">Array of Notifications currently not yet 
            delivered to a subscriber.  The maximum number of Notifications has been defined
            by the MaxNotifications property. </param>
            <returns>Number of dequeued Notifications.</returns>
        </member>
        <member name="M:nsAlienRFID2.CAlienServer.GetCurrentIOEvents(nsAlienRFID2.IAlienIOInfo[]@)">
            <summary>
            Retrieves an array of currently collected IOEvents in case when nobody 
            has subscribed to the ServerMessageReceived event.  This method is suitable for applications
            developed in a synchronous model (e.g.: Visual Basic 6.)  Instead of complex management of events raised
            on a thread different from main GUI thread, these applications can just  periodically call this method synchronously.
            </summary>
            <param name="aIOinfo">Array of IO events currently not yet 
            delivered to a subscriber. </param>
            <returns>Number of dequeued Events.</returns>
        </member>
        <member name="E:nsAlienRFID2.CAlienServer.ServerMessageReceived">
            <summary>
            Event raised when a CAlienServer object received a message.
            Contains a string with GUID identifying connection sending message and message text.
            </summary>
            <remarks>
            This event gets raised on a separate thread created by AsyncCallBack.
            </remarks>
        </member>
        <member name="E:nsAlienRFID2.CAlienServer.ServerConnectionEstablished">
            <summary>
            Event raised when a CAlienServer object accepted an incomming connection request.
            This event contains a unique GUID assigned to newly established connection.
            </summary>
            <remarks>
            This event gets raised on a separate thead created by an AsyncCallBack.
            </remarks>
        </member>
        <member name="E:nsAlienRFID2.CAlienServer.ServerConnectionEnded">
            <summary>
            When a CAlienServer object got a receive call-back with an empty msg (
            this means that connection has been lost) these event gets raised
            containing the GUID identifying lost connection.
            </summary>
            <remarks>
            This event gets raised on a separate thread created by an AsyncCallBack.
            </remarks>
        </member>
        <member name="E:nsAlienRFID2.CAlienServer.ServerListeningStarted">
            <summary>
            Event raised when a CAlienServer object started to listen for incomming
            connection requests.
            </summary>
            <remarks>
            This event gets raised on the same thread as calling StartListening() function.
            </remarks>
        </member>
        <member name="E:nsAlienRFID2.CAlienServer.ServerListeningStopped">
            <summary>
            Event raised when a CAlienServer object stops to listen for incomming
            connection requests.
            </summary>
        </member>
        <member name="E:nsAlienRFID2.CAlienServer.ServerSocketError">
            <summary>
            Event raised whenever a CAlienServer object discoveres an error.
            Contains a string with error message
            </summary>
            <remarks>
            This event gets raised on a thread where an error occures.
            </remarks>
        </member>
        <member name="P:nsAlienRFID2.CAlienServer.NotificationHost">
            <summary>
            String includes listener's IPAddress and Port number separated by ":".
            When setting value this property stops listening and restarts it if needed.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CAlienServer.Port">
            <summary>
            Gets or sets an integer value for the port number on which
            the CAlienServer listens for messages.  
            Settable only if the server is not listening.
            Default value is the 7797.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CAlienServer.IPAddressString">
            <summary>
            Gets or sets the IP Address string of the listener local end point.
            Settable only when the server is not listening.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CAlienServer.IPAddresses">
            <summary>
            Gets the ArrayList containing all IP Addresses (in the IPv4 format) resolved by DNS for current host.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CAlienServer.IsListening">
            <summary>
            Gets boolean value indicating if the server is currently listening or not.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CAlienServer.MaxQueuedMessages">
            <summary>
            Defines maximum number of messages (tag notifications along with IO events)
            to collect in the queue in case when there is NO subscribers to the ServerMessageReceived event.
            Default value is 100.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CAlienServer.MaxNotifications">
            <summary>
            Same as MaxQueuedMessages.  
            This property has been replaced by the MaxQueuedMessages and
             is left here only for backward compatibility.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CAlienServer.ActiveConnectionsCount">
            <summary>
            Returns number of readers currently conntected to the server.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.CAlienServer.Logging">
            <summary>
             TRUE to write all received data and errors to the AlienAPI.log file, FALSE otherwise.
            <seealso cref="T:nsAlienRFID2.AlienLog"/>
            <seealso cref="P:nsAlienRFID2.AlienLog.Path"/>
            <seealso cref="M:nsAlienRFID2.AlienLog.WriteLine(System.Boolean,System.String)"/>
            </summary>
        </member>
        <member name="T:nsAlienRFID2.CAlienServer.ServerMessageReceivedEventHandler">
            <summary>
            Events handler for raising an event when CAlienServer
            received a message.
            </summary>
            <param name='msg'>Returns a string containing GUID of connection 
            that has sent this message followed by a space (" ") and message text.</param>
        </member>
        <member name="T:nsAlienRFID2.CAlienServer.ServerConnectionEstablishedEventHandler">
            <summary>
            Event handler for raising events when CAlienServer accepted
            an incomming connection request.
            </summary>
            <param name='id'>Returns a string with unique GUID identifying established connection.</param>
        </member>
        <member name="T:nsAlienRFID2.CAlienServer.ServerConnectionEndedEventHandler">
            <summary>
            Event handler for raising events when CAlienServer lost an established connection.
            </summary>
            <param name='id'>Returns a string with GUID of a lost connection.</param>
        </member>
        <member name="T:nsAlienRFID2.CAlienServer.ServerListeningStartedEventHandler">
            <summary>
            Event handler for raising events when CAlienServer started listen for 
            incomming connection requests.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.CAlienServer.ServerListeningStoppedEventHandler">
            <summary>
            Event handler for raising events when CAlienServer stops listen for 
            incomming connection requests.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.CAlienServer.ServerSocketErrorEventHandler">
            <summary>
            Event handler for raising events when a socket error happened in CAlienServer.
            </summary>
            <param name='msg'>Returns a string with an error message.</param>
        </member>
        <member name="T:nsAlienRFID2.IoPacketType">
            <summary>
            Indicates the type of asynchronous operation.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.IoPacket">
            <summary>
            Describes an IO asynchronous IO request. This class contains the delegate which
            is fired when the specified operation completes. It also allocates the data
            buffer used by a send or receive operation.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.IoPacket.#ctor(nsAlienRFID2.SocketConnection,nsAlienRFID2.IoPacketType)">
            <summary>
            Initialize member variables and allocate the data buffer if this IO packet
            describes an asynchronous send or receive operation.
            </summary>
            <param name="connObj">Connection object to which this IO packet belongs to</param>
            <param name="packetType">Operation type being created</param>
        </member>
        <member name="M:nsAlienRFID2.IoPacket.PostConnect(System.Net.IPEndPoint)">
            <summary>
            Posts an asynchronous connect operation on the underlying TCP socket.
            </summary>
            <param name="serverEndPoint"></param>
        </member>
        <member name="M:nsAlienRFID2.IoPacket.PostAccept">
            <summary>
            Posts an asynchronous accept operation on the underlying TCP socket.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.IoPacket.PostReceive">
            <summary>
            Posts an asynchronous receive operation on the underlying TCP socket.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.IoPacket.PostSend">
            <summary>
            Posts an asynchronous send operation on the underlying TCP socket.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.IoPacket.IoCompleteCallback(System.IAsyncResult)">
            <summary>
            This is the asynchronous delegate that is called when an operation on the posted
            IO object completes. This method simply calls the owning objects HandleIo method.
            Only object derived from teh SocketConnection class can use this IoPacket class
            for describing async IO operations.
            </summary>
            <param name="ar">Asynchronous context information</param>
        </member>
        <member name="T:nsAlienRFID2.SocketConnection">
            <summary>
            Base class from which the TcpServer and ClientConnection objects are derived
            from.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.SocketConnection.#ctor">
            <summary>
            Simple constructor to initialize counters to zero.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.SocketConnection.HandleIo(nsAlienRFID2.IoPacket,System.IAsyncResult)">
            <summary>
            This method handles the IO operation that completed.
            </summary>
            <param name="io">Object describing the IO operation that completed</param>
            <param name="ar">Asynchronous context information</param>
        </member>
        <member name="M:nsAlienRFID2.SocketConnection.RemoveIo(nsAlienRFID2.IoPacket)">
            <summary>
            Removes the indicated IO packet from any lists or queues the packet may be in
            </summary>
            <param name="io">IO object to remove from any lists</param>
        </member>
        <member name="M:nsAlienRFID2.SocketConnection.IncrementOutstanding(nsAlienRFID2.IoPacketType)">
            <summary>
            Increments the count for the outstanding operation type. This is implemented such
            that the IoPacket post routines can make a call to increment the count such that
            the caller of each post routine doesn't have to make the increment call.
            </summary>
            <param name="ioType">Operation type to increment count for</param>
        </member>
        <member name="M:nsAlienRFID2.SocketConnection.DecrementOutstanding(nsAlienRFID2.IoPacketType)">
            <summary>
            Decrements the count for the outstanding operation type. This is implemented such
            that the IoPacket post routines can make a call to decrement the count such that
            the caller of each post routine doesn't have to make the decrement call.
            </summary>
            <param name="ioType">Operation type to decrement count for</param>
        </member>
        <member name="T:nsAlienRFID2.AcceptConnection">
            <summary>
            This class identifies a client connection. It keeps track of all outstanding
            async send and receive operations and handles completed IO operations.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.AcceptConnection.#ctor(System.Net.Sockets.Socket,nsAlienRFID2.TcpServer)">
            <summary>
            This is the constructor for the client which takes only the client socket
            object. It creates the lists of outstanding send and receive operations
            and posts the initial BeginReceive.
            </summary>
            <param name="tcpClient">Socket object representing the client connection</param>
            <param name="serverObject">Reference to the server object that owns this client connection</param>
        </member>
        <member name="M:nsAlienRFID2.AcceptConnection.HandleIo(nsAlienRFID2.IoPacket,System.IAsyncResult)">
            <summary>
            This overrided routine handles all asynchronous IO that completes on the ClientConnection 
            object. Since the client only sends and receives only the Send and Receive commands are
            handled. The client connection first receives a request from the client until the client
            shuts down the send path. At this point the client connection will receive zero bytes
            indicating the client is done sending. This is followed by the client sending a response
            to the client. Once the requested number of send operations are performed to the client
            the client socket is closed and resources are freed (by closing the socket handle and
            indicating to the owning TcpServer to remove the ClientConnection object from its list
            of connections).
            </summary>
            <param name="io">IO packet object that describes the completed operation</param>
            <param name="ar">Asynchronous context information for the completed operation</param>
        </member>
        <member name="M:nsAlienRFID2.AcceptConnection.RemoveIo(nsAlienRFID2.IoPacket)">
            <summary>
            Removes the given IoPacket from the appropriate ArrayList depending on the operation
            type.
            </summary>
            <param name="io">IO object to remove from any lists</param>
        </member>
        <member name="T:nsAlienRFID2.TcpServer">
            <summary>
            This class encapsulates functionality for the TCP server object. This
            class keeps track of all clients accepted on the listening socket
            as well as the outstanding asynchronous accept operations. The class
            keeps track the send and receive byte counters and client counts.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.TcpServer.#ctor(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Simple constructor for the TcpServer class. This initializes the counters
            and creates the listening TCP socket.
            </summary>
            <param name="listenEndPoint">Endpoint to create the listening socket on</param>
            <param name="asyncListenLimit">Maximum number of async accepts outstanding</param>
        </member>
        <member name="M:nsAlienRFID2.TcpServer.RemoveClient(nsAlienRFID2.AcceptConnection)">
            <summary>
            This method removes an accepted client object (AcceptConnection) from the
            list of accepted connections. It decrements the current client count.
            </summary>
            <param name="clientObject">Accepted client object to remove</param>
        </member>
        <member name="M:nsAlienRFID2.TcpServer.Shutdown">
            <summary>
            This method marks the TcpServer as shutting down. This flag is set before all the
            listening sockets are closed.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.TcpServer.HandleIo(nsAlienRFID2.IoPacket,System.IAsyncResult)">
            <summary>
            This routine handles all IO completion events initiated by the TcpServer
            listening socket which will consist of BeginAccept events. Before accessing
            the socket, a check is made to make sure the server is not shutting down
            in which case the listeng socket have already been closed.
            </summary>
            <param name="io">IO packet describing the operation that completed</param>
            <param name="ar">Asynchronous context information</param>
        </member>
        <member name="M:nsAlienRFID2.TcpServer.RemoveIo(nsAlienRFID2.IoPacket)">
            <summary>
            This method removes the IoPacket from the appropriate list. 
            </summary>
            <param name="io">The IoPacket to remove from the correct list</param>
        </member>
        <member name="M:nsAlienRFID2.TcpServer.IncrementByteCount(System.Int32,System.Int32)">
            <summary>
            Increments the sent and received byte counts for all client connections established
            on this TCP server socket. Each AcceptConnection has a reference to the TcpServer
            on which the client connection was accepted -- it then calls this method to 
            increment the byte counters.
            </summary>
            <param name="sendCount">Nubmer of bytes sent to increment counter by</param>
            <param name="recvCount">Number of bytes received to increment counter by</param>
        </member>
        <member name="T:nsAlienRFID2.NotifyInfo">
            <summary>
            Represents information sent by Alien reader as a notification message.
            This type is usefull for parsing reader's notifications.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.NotifyInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.NotifyInfo.#ctor(nsAlienRFID2.NotifyInfo)">
            <summary>
            Copy constructor.
            </summary>
            <param name="ni">NotifyInfo object to make copy of.</param>
        </member>
        <member name="P:nsAlienRFID2.NotifyInfo.ReaderName">
            <summary>
            Sets / Gets string with Reader Name.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.NotifyInfo.ReaderType">
            <summary>
            Sets / Gets string with reader type.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.NotifyInfo.IPAddress">
            <summary>
            Sets / Gets string with current IP Address of a reader.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.NotifyInfo.CommandPort">
            <summary>
            Gets / Sets string representing current network port number.
            Default = "23".
            </summary>
        </member>
        <member name="P:nsAlienRFID2.NotifyInfo.Time">
            <summary>
            Sets / Gets string representing time of Notification.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.NotifyInfo.Reason">
            <summary>
            Sets / Gets string representing reason of notification. 
            </summary>
        </member>
        <member name="P:nsAlienRFID2.NotifyInfo.StartTriggerLines">
            <summary>
            Sets / Gets string representing external digital input line that started the
            reader's automode sequence.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.NotifyInfo.StopTriggerLines">
            <summary>
            Sets / Gets string representing external digital input line that stopped the 
            reader's automode sequence.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.NotifyInfo.TagList">
            <summary>
            Sets / Gets array of type TagInfo representing Alien TagList.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.NotifyInfo.MACAddress">
            <summary>
            Represents MAC Address of a reader.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eReaderState.eNone">
            <summary>
            Before upgrade.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eReaderState.eUpgradeRequested">
            <summary>
            Reader has the "Alien >" prompt and needs a reboot-interrupt.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eReaderState.eBootInterrupted">
            <summary>
            Reader has the "Bootloader >" prompt.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eReaderState.ePreambleSent">
            <summary>
            After preamble sent.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eReaderState.eUploading">
            <summary>
            Uploading firmware bits to the reader.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eReaderState.eDone">
            <summary>
            Finished upgrade successfully.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eReaderState.eRunMainApp">
            <summary>
            Run main application after firmware upload.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eReaderState.eReady">
            <summary>
            Final state.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eReaderState.eUnknown">
            
        </member>
        <member name="T:nsAlienRFID2.CAlienUpgrader">
            <summary>
            Summary description for CAlienUpgrader.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.CAlienUpgrader.mComPort">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.AlienStatistics">
            <summary>
            Contains various information about reading, killing, and locking tags.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.AlienStatistics.#ctor(System.String)">
            <summary>
            Instantiates a new object and fills it with statistics information.
            </summary>
            <param name="statLine">String containing Alien statistics information.</param>
        </member>
        <member name="M:nsAlienRFID2.AlienStatistics.Add(nsAlienRFID2.AlienStatistics)">
            <summary>
            Adds new statistics information to the existing in current instance.
            </summary>
            <param name="stats">An instance of AlienStatistics.</param>
            <returns>Updated instance</returns>
        </member>
        <member name="P:nsAlienRFID2.AlienStatistics.Name">
            <summary>
            String specifying source of current statistics.  
            Valid values are: "Device" or a number/name of an antenna (e.g.: "0", ..."3".)
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienStatistics.ReadCount">
            <summary>
            Number of tags successfully read since reader's bootup time.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienStatistics.WriteCount">
            <summary>
            Number of tags successfully written since reader's bootup time.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienStatistics.LockCount">
            <summary>
            Number of tags successfully locked since reader's bootup time.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienStatistics.KillCount">
            <summary>
            Number of tags successfully killed since reader's bootup time.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienStatistics.FailedReadCount">
            <summary>
            Number of failed attempts to read tags.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienStatistics.FailedWriteCount">
            <summary>
            Number of failed attempts to write tags.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienStatistics.FailedLockCount">
            <summary>
            Number of failed attempts to lock tags.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienStatistics.FailedKillCount">
            <summary>
            Number of failed attempts to kill tags.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.InteractiveServer">
            <summary>
            Summary description for InteractiveServer.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.CAlienComPort2.CommandResponseWithTimeout(System.String,System.Int32)">
            <summary>
            Sends a command and reads a "\r\n\0" terminated response.
            </summary>
            <param name="strToSend"></param>
            <param name="millisec"></param>
            <returns></returns>
        </member>
        <member name="T:nsAlienRFID2.RFIDProtocol">
            <summary>
            Enumeration that representing different types of RFID standards/protocols.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.RFIDProtocol.enumEPCglobalC0">
            <summary>
            Represents EPCglobal Class 0.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.RFIDProtocol.enumEPCglobalC1">
            <summary>
            Represents EPCglobal Class 1.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.RFIDProtocol.enumEPCglobalG2">
            <summary>
            Represents EPCglobal Class 1 Generation 2.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.ComInterface">
            <summary>
            Enumeration representing Alien reader communication interface: RS-232 or Network.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.ComInterface.enumSerial">
            <summary>
            Represents communication to the reader using RS-232.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.ComInterface.enumTCPIP">
            <summary>
            Represents communication to the reader using TCP.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.eIOType">
            <summary>
            Enumerates Digital Inputs/Outputs
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eIOType.DI">
            <summary>
            Inputs only.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eIOType.DO">
            <summary>
            Outputs only.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eIOType.DIO">
            <summary>
            Inputs and Outputs, interleaved by event time.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eIOType.DIDO">
            <summary>
            Inputs followed by Outputs (not interleaved.)
            </summary>
        </member>
        <member name="T:nsAlienRFID2.eNotifyInclude">
            <summary>
            Enumerates types of messages included into a notification.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eNotifyInclude.Tags">
            <summary>
            Tags only.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eNotifyInclude.All">
            <summary>
            Tags and digital IO events.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eNotifyInclude.DIO">
            <summary>
            Digital IO events only.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eNotifyInclude.DI">
            <summary>
            Digital Input events only.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eNotifyInclude.DO">
            <summary>
            Digital Output events only.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.eLockTarget">
            <summary>
            Enumerates targets for lock/unlock operations on Gen2 tags.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eLockTarget.EPC">
            <summary>
            EPC bank.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eLockTarget.User">
            <summary>
            USER bank.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eLockTarget.KillPwd">
            <summary>
            Kill Password.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eLockTarget.AccessPwd">
            <summary>
            Access Password.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.eLockType">
            <summary>
            Enumerates types of locking/unlocking operations available for Gen2 tags.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eLockType.Lock">
            <summary>
            The data is locked and may be unlocked.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eLockType.PermaLock">
            <summary>
            The data is locked and may never be unlocked.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eLockType.PermaUnlock">
            <summary>
            The data is unlocked and many never be locked.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.eProgIncrement">
            <summary>
            Enumerates condition for incrementing data by one upon completion 
            of a corresponding programing operation.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eProgIncrement.Off">
            <summary>
            Data is never incremented.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eProgIncrement.Success">
            <summary>
            Data is incremented only after successful operation.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eProgIncrement.Fail">
            <summary>
            Data is incremented only after a failure.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eProgIncrement.Always">
            <summary>
            Data is incremented after each programming operation.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.eG2Bank">
            <summary>
            Enumerates memory banks on a EPCglobal Class1 Gen2 tag.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eG2Bank.RESERVED">
            <summary>
            Bank 0 - RESERVED
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eG2Bank.EPC">
            <summary>
            Bank 1 - EPC
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eG2Bank.TID">
            <summary>
            Bank 2 - TID
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eG2Bank.USER">
            <summary>
            Bank 3 - USER
            </summary>
        </member>
        <member name="T:nsAlienRFID2.eProgramSuccessFormat">
            <summary>
            Enumerates ProgramSuccessFormat as reader's response to a successful programming operation.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eProgramSuccessFormat.Success">
            <summary>
            "Success!"
            </summary>
        </member>
        <member name="F:nsAlienRFID2.eProgramSuccessFormat.TagData">
            <summary>
            Tag data
            </summary>
        </member>
        <member name="T:nsAlienRFID2.AlienBaudRates">
            <summary>
            Helper class that always stores a pair of static integer variables that represent one of values supported 
            by Alien readers. This class provides an easy convertion between common physical baud rate values and 
            their corresponding binary values in both Alien ASCII and Binary Protocols.  Currently supported values are: 
            115200 (default), 57600, 38400, 19200, and 9600 as physical values which correspond to 
            Alien binary parameters: 0 (default), 1, 2, 3, 4.  
            Set properties throw an exception for an attempt to set an unsupported value.
            </summary>
        </member>
        <member name="F:nsAlienRFID2.AlienBaudRates.SupportedValues">
            <summary>
            An array containing set of physical values for supported baud rates.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienBaudRates.PhysicalValue">
            <summary>
            Property representing physical value of current baud rate.  Setting a new PhysicalValue 
            affects the corresponding AlienValue stored in this class.  Default value is 115200. 
            Can throw an exception if an unsupported value provided to set.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.AlienBaudRates.AlienValue">
            <summary>
            Property representing Alien binary value of current baud rate.  Setting a new AlienValue 
            affects the corresponding PhysicalValue stored in this class.  Default value is 0. 
            Can throw an exception if an unsupported value provided to set.
            </summary>
        </member>
        <member name="T:nsAlienRFID2.UpgradeInfo">
            <summary>
            Storage class that contains information about an upgrade status.
            An instance of this class has been included as an argument of UpgradeComplete and 
            UpgradeProgress events.
            NOT supported by Alien Mobile API.
            </summary>
            <seealso cref="E:nsAlienRFID2.clsReader.UpgradeComplete"/>
            <seealso cref="E:nsAlienRFID2.clsReader.UpgradeProgress"/>
        </member>
        <member name="M:nsAlienRFID2.UpgradeInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.UpgradeInfo.#ctor(nsAlienRFID2.UpgradeInfo)">
            <summary>
            Copy constructor.
            </summary>
            <param name="state">Instance of the UpgradeInfo class.</param>
        </member>
        <member name="M:nsAlienRFID2.UpgradeInfo.ToString">
            <summary>
            Provides information about current instance as a multi-line string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:nsAlienRFID2.UpgradeInfo.PercentDone">
            <summary>
            Provides percentage status about current upgrading task.  
            (Not available for all upgrading tasks.)
            </summary>
        </member>
        <member name="P:nsAlienRFID2.UpgradeInfo.Message">
            <summary>
            Provides description about current upgrading tasks and status.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.UpgradeInfo.CanCancel">
            <summary>
            Provides true/false information about if it is safe to interrupt with running upgrading process and cancel it.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.UpgradeInfo.UploadResult">
            <summary>
            Provides information about status of uploading a firmware file to reader.
            Value of 0 indicates that firmware file has been uploaded successfully; value of -1 indicates that 
            upload process has been interrupted by a failure and/or cancelled; other error codes possible.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.UpgradeInfo.UpgradeResult">
            <summary>
            Provides information about status of firmware upgrading with an uploaded file.
            Value of 0 indicates that reader has been upgraded successfully; value of -1 indicates that
            upgrade process has been interrupted by a failure and/or cancelled; other error codes possible.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.UpgradeInfo.Reconnected">
            <summary>
            Provides true\false information about status of restoring connection after upgrade.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.UpgradeInfo.StateRestored">
            <summary>
            Provides true/false information about status of restoring reader's state after upgrade.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.UpgradeInfo.Cancelled">
            <summary>
            Provides true/false information if upgrade process has been cancelled.
            </summary>
        </member>
        <member name="P:nsAlienRFID2.UpgradeInfo.Completed">
            <summary>
            Provides true/false information about completion of the upgrade process.
            </summary>
        </member>
        <member name="M:nsAlienRFID2.cTcpClient.Close">
            <summary>
            silently, no "Q"
            </summary>
        </member>
        <member name="P:nsAlienRFID2.cTcpClient.RenewInterval">
            <summary>
            In milliseconds
            </summary>
        </member>
    </members>
</doc>
