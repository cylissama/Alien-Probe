//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlphaScan.PimServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/PIMWcfService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RunningCountData", Namespace="http://schemas.datacontract.org/2004/07/PIMWcfService")]
    [System.SerializableAttribute()]
    public partial class RunningCountData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FacilityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OccupiedSpacesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Facility {
            get {
                return this.FacilityField;
            }
            set {
                if ((this.FacilityField.Equals(value) != true)) {
                    this.FacilityField = value;
                    this.RaisePropertyChanged("Facility");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OccupiedSpaces {
            get {
                return this.OccupiedSpacesField;
            }
            set {
                if ((this.OccupiedSpacesField.Equals(value) != true)) {
                    this.OccupiedSpacesField = value;
                    this.RaisePropertyChanged("OccupiedSpaces");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RFIDTag", Namespace="http://schemas.datacontract.org/2004/07/PIMWcfService")]
    [System.SerializableAttribute()]
    public partial class RFIDTag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AntennaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FACField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GPSDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastDetectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RawHexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlphaScan.PimServiceRef.TagFunctionResponse ResponseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagHexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isWrittenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string permitStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string prefixField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Antenna {
            get {
                return this.AntennaField;
            }
            set {
                if ((object.ReferenceEquals(this.AntennaField, value) != true)) {
                    this.AntennaField = value;
                    this.RaisePropertyChanged("Antenna");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Card {
            get {
                return this.CardField;
            }
            set {
                if ((this.CardField.Equals(value) != true)) {
                    this.CardField = value;
                    this.RaisePropertyChanged("Card");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FAC {
            get {
                return this.FACField;
            }
            set {
                if ((this.FACField.Equals(value) != true)) {
                    this.FACField = value;
                    this.RaisePropertyChanged("FAC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GPSData {
            get {
                return this.GPSDataField;
            }
            set {
                if ((object.ReferenceEquals(this.GPSDataField, value) != true)) {
                    this.GPSDataField = value;
                    this.RaisePropertyChanged("GPSData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastDetect {
            get {
                return this.LastDetectField;
            }
            set {
                if ((this.LastDetectField.Equals(value) != true)) {
                    this.LastDetectField = value;
                    this.RaisePropertyChanged("LastDetect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lot {
            get {
                return this.LotField;
            }
            set {
                if ((object.ReferenceEquals(this.LotField, value) != true)) {
                    this.LotField = value;
                    this.RaisePropertyChanged("Lot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Range {
            get {
                return this.RangeField;
            }
            set {
                if ((this.RangeField.Equals(value) != true)) {
                    this.RangeField = value;
                    this.RaisePropertyChanged("Range");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RawHex {
            get {
                return this.RawHexField;
            }
            set {
                if ((object.ReferenceEquals(this.RawHexField, value) != true)) {
                    this.RawHexField = value;
                    this.RaisePropertyChanged("RawHex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlphaScan.PimServiceRef.TagFunctionResponse Response {
            get {
                return this.ResponseField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseField, value) != true)) {
                    this.ResponseField = value;
                    this.RaisePropertyChanged("Response");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagHex {
            get {
                return this.TagHexField;
            }
            set {
                if ((object.ReferenceEquals(this.TagHexField, value) != true)) {
                    this.TagHexField = value;
                    this.RaisePropertyChanged("TagHex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Zone {
            get {
                return this.ZoneField;
            }
            set {
                if ((object.ReferenceEquals(this.ZoneField, value) != true)) {
                    this.ZoneField = value;
                    this.RaisePropertyChanged("Zone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isWritten {
            get {
                return this.isWrittenField;
            }
            set {
                if ((this.isWrittenField.Equals(value) != true)) {
                    this.isWrittenField = value;
                    this.RaisePropertyChanged("isWritten");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string permitString {
            get {
                return this.permitStringField;
            }
            set {
                if ((object.ReferenceEquals(this.permitStringField, value) != true)) {
                    this.permitStringField = value;
                    this.RaisePropertyChanged("permitString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string prefix {
            get {
                return this.prefixField;
            }
            set {
                if ((object.ReferenceEquals(this.prefixField, value) != true)) {
                    this.prefixField = value;
                    this.RaisePropertyChanged("prefix");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagFunctionResponse", Namespace="http://schemas.datacontract.org/2004/07/PIMWcfService")]
    [System.SerializableAttribute()]
    public partial class TagFunctionResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Color ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HandledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsIgnoredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsValidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResponseField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Color Color {
            get {
                return this.ColorField;
            }
            set {
                if ((this.ColorField.Equals(value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Handled {
            get {
                return this.HandledField;
            }
            set {
                if ((this.HandledField.Equals(value) != true)) {
                    this.HandledField = value;
                    this.RaisePropertyChanged("Handled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsIgnored {
            get {
                return this.IsIgnoredField;
            }
            set {
                if ((this.IsIgnoredField.Equals(value) != true)) {
                    this.IsIgnoredField = value;
                    this.RaisePropertyChanged("IsIgnored");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid {
            get {
                return this.IsValidField;
            }
            set {
                if ((this.IsValidField.Equals(value) != true)) {
                    this.IsValidField = value;
                    this.RaisePropertyChanged("IsValid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Response {
            get {
                return this.ResponseField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponseField, value) != true)) {
                    this.ResponseField = value;
                    this.RaisePropertyChanged("Response");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PimServiceRef.IPIMService")]
    public interface IPIMService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/GetData", ReplyAction="http://tempuri.org/IPIMService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/GetData", ReplyAction="http://tempuri.org/IPIMService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IPIMService/GetDataUsingDataContractResponse")]
        AlphaScan.PimServiceRef.CompositeType GetDataUsingDataContract(AlphaScan.PimServiceRef.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IPIMService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<AlphaScan.PimServiceRef.CompositeType> GetDataUsingDataContractAsync(AlphaScan.PimServiceRef.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/AddCountData", ReplyAction="http://tempuri.org/IPIMService/AddCountDataResponse")]
        void AddCountData(AlphaScan.PimServiceRef.RunningCountData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/AddCountData", ReplyAction="http://tempuri.org/IPIMService/AddCountDataResponse")]
        System.Threading.Tasks.Task AddCountDataAsync(AlphaScan.PimServiceRef.RunningCountData data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/GetCount", ReplyAction="http://tempuri.org/IPIMService/GetCountResponse")]
        AlphaScan.PimServiceRef.RunningCountData GetCount(int facility);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/GetCount", ReplyAction="http://tempuri.org/IPIMService/GetCountResponse")]
        System.Threading.Tasks.Task<AlphaScan.PimServiceRef.RunningCountData> GetCountAsync(int facility);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/AddRFIDDataList", ReplyAction="http://tempuri.org/IPIMService/AddRFIDDataListResponse")]
        System.Collections.Generic.List<string> AddRFIDDataList(System.Collections.Generic.List<AlphaScan.PimServiceRef.RFIDTag> data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/AddRFIDDataList", ReplyAction="http://tempuri.org/IPIMService/AddRFIDDataListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> AddRFIDDataListAsync(System.Collections.Generic.List<AlphaScan.PimServiceRef.RFIDTag> data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/AddRFIDData", ReplyAction="http://tempuri.org/IPIMService/AddRFIDDataResponse")]
        string AddRFIDData(AlphaScan.PimServiceRef.RFIDTag data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPIMService/AddRFIDData", ReplyAction="http://tempuri.org/IPIMService/AddRFIDDataResponse")]
        System.Threading.Tasks.Task<string> AddRFIDDataAsync(AlphaScan.PimServiceRef.RFIDTag data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPIMServiceChannel : AlphaScan.PimServiceRef.IPIMService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PIMServiceClient : System.ServiceModel.ClientBase<AlphaScan.PimServiceRef.IPIMService>, AlphaScan.PimServiceRef.IPIMService {
        
        public PIMServiceClient() {
        }
        
        public PIMServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PIMServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PIMServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PIMServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public AlphaScan.PimServiceRef.CompositeType GetDataUsingDataContract(AlphaScan.PimServiceRef.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<AlphaScan.PimServiceRef.CompositeType> GetDataUsingDataContractAsync(AlphaScan.PimServiceRef.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public void AddCountData(AlphaScan.PimServiceRef.RunningCountData data) {
            base.Channel.AddCountData(data);
        }
        
        public System.Threading.Tasks.Task AddCountDataAsync(AlphaScan.PimServiceRef.RunningCountData data) {
            return base.Channel.AddCountDataAsync(data);
        }
        
        public AlphaScan.PimServiceRef.RunningCountData GetCount(int facility) {
            return base.Channel.GetCount(facility);
        }
        
        public System.Threading.Tasks.Task<AlphaScan.PimServiceRef.RunningCountData> GetCountAsync(int facility) {
            return base.Channel.GetCountAsync(facility);
        }
        
        public System.Collections.Generic.List<string> AddRFIDDataList(System.Collections.Generic.List<AlphaScan.PimServiceRef.RFIDTag> data) {
            return base.Channel.AddRFIDDataList(data);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> AddRFIDDataListAsync(System.Collections.Generic.List<AlphaScan.PimServiceRef.RFIDTag> data) {
            return base.Channel.AddRFIDDataListAsync(data);
        }
        
        public string AddRFIDData(AlphaScan.PimServiceRef.RFIDTag data) {
            return base.Channel.AddRFIDData(data);
        }
        
        public System.Threading.Tasks.Task<string> AddRFIDDataAsync(AlphaScan.PimServiceRef.RFIDTag data) {
            return base.Channel.AddRFIDDataAsync(data);
        }
    }
}
